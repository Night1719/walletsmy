#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ BG Survey Platform –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gunicorn WSGI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import gunicorn
        print("‚úÖ Gunicorn –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        print("‚ùå Gunicorn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gunicorn")
        return False
    
    try:
        import flask
        print("‚úÖ Flask –Ω–∞–π–¥–µ–Ω")
    except ImportError:
        print("‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flask")
        return False
    
    return True

def create_gunicorn_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gunicorn"""
    config_content = """# Gunicorn –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è BG Survey Platform
import multiprocessing

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
workers = multiprocessing.cpu_count() * 2 + 1

# –¢–∏–ø —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
worker_class = 'sync'

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
timeout = 120

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
max_requests = 1000
max_requests_jitter = 100

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
preload_app = True

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
accesslog = 'logs/gunicorn_access.log'
errorlog = 'logs/gunicorn_error.log'
loglevel = 'info'

# –ë–∏–Ω–¥–∏–Ω–≥
bind = '0.0.0.0:8000'

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≥—Ä—É–ø–ø–∞ (–¥–ª—è Linux)
# user = 'www-data'
# group = 'www-data'

# PID —Ñ–∞–π–ª
pidfile = 'gunicorn.pid'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
raw_env = [
    'FLASK_CONFIG=production',
]
"""
    
    config_path = Path('gunicorn.conf.py')
    with open(config_path, 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gunicorn —Å–æ–∑–¥–∞–Ω–∞: {config_path}")
    return config_path

def create_systemd_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Linux"""
    service_content = """[Unit]
Description=BG Survey Platform
After=network.target

[Service]
Type=notify
User=www-data
Group=www-data
WorkingDirectory=/path/to/bg-survey-platform
Environment=PATH=/path/to/bg-survey-platform/venv/bin
ExecStart=/path/to/bg-survey-platform/venv/bin/gunicorn -c gunicorn.conf.py app:app
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true

[Install]
WantedBy=multi-user.target
"""
    
    service_path = Path('bg-survey-platform.service')
    with open(service_path, 'w', encoding='utf-8') as f:
        f.write(service_content)
    
    print(f"‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {service_path}")
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç–∏ –≤ —Ñ–∞–π–ª–µ —Å–µ—Ä–≤–∏—Å–∞!")
    return service_path

def create_nginx_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"""
    nginx_config = """server {
    listen 80;
    server_name your-domain.com;
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-domain.com;
    
    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    ssl_certificate /path/to/ssl/certificate.crt;
    ssl_certificate_key /path/to/ssl/private.key;
    
    # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    location /static/ {
        alias /path/to/bg-survey-platform/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Gunicorn
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
}
"""
    
    nginx_path = Path('nginx.conf')
    with open(nginx_path, 'w', encoding='utf-8') as f:
        f.write(nginx_config)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞: {nginx_path}")
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω –∏ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
    return nginx_path

def run_gunicorn(host='0.0.0.0', port=8000, workers=None, config_file=None):
    """–ó–∞–ø—É—Å–∫ Gunicorn —Å–µ—Ä–≤–µ—Ä–∞"""
    
    if not check_dependencies():
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path('logs').mkdir(exist_ok=True)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cmd = ['gunicorn']
    
    if config_file and Path(config_file).exists():
        cmd.extend(['-c', config_file])
    else:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        cmd.extend([
            '--bind', f'{host}:{port}',
            '--workers', str(workers or 4),
            '--worker-class', 'sync',
            '--timeout', '120',
            '--access-logfile', 'logs/gunicorn_access.log',
            '--error-logfile', 'logs/gunicorn_error.log',
            '--log-level', 'info',
            '--preload'
        ])
    
    cmd.append('app:app')
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Gunicorn —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {' '.join(cmd)}")
    print(f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}:{port}")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        subprocess.run(cmd, check=True)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Gunicorn: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='BG Survey Platform - –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ')
    parser.add_argument('--host', default='0.0.0.0', help='–•–æ—Å—Ç –¥–ª—è –±–∏–Ω–¥–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=8000, help='–ü–æ—Ä—Ç –¥–ª—è –±–∏–Ω–¥–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)')
    parser.add_argument('--workers', type=int, default=4, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É Gunicorn')
    parser.add_argument('--create-config', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--create-service', action='store_true', help='–°–æ–∑–¥–∞—Ç—å systemd —Å–µ—Ä–≤–∏—Å')
    parser.add_argument('--create-nginx', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("BG Survey Platform - –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print("=" * 60)
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if args.create_config:
        create_gunicorn_config()
        print()
    
    if args.create_service:
        create_systemd_service()
        print()
    
    if args.create_nginx:
        create_nginx_config()
        print()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    if not args.create_config and not args.create_service and not args.create_nginx:
        success = run_gunicorn(
            host=args.host,
            port=args.port,
            workers=args.workers,
            config_file=args.config
        )
        
        if not success:
            sys.exit(1)
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ README.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")

if __name__ == '__main__':
    main()