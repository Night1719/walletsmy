from aiogram.types import KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import Dict
from config import ALLOWED_SERVICES


def phone_request_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    kb.add(KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))
    return kb.as_markup(resize_keyboard=True)


def main_menu_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(
        KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"),
        KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"),
    )
    kb.row(
        KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    )
    kb.row(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb.as_markup(resize_keyboard=True)


def main_menu_after_auth_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="üõ† Helpdesk"))
    kb.row(KeyboardButton(text="üë§ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"))
    kb.row(KeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"))
    kb.row(KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    return kb.as_markup(resize_keyboard=True)


def my_tasks_menu_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–µ"), KeyboardButton(text="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def cancel_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    return kb.as_markup(resize_keyboard=True)


def settings_menu_keyboard(prefs: Dict[str, bool]):
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {'‚úîÔ∏è' if prefs.get('notify_comment') else '‚ùå'}", callback_data="toggle:notify_comment")
    kb.button(text=f"–ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å {'‚úîÔ∏è' if prefs.get('notify_status') else '‚ùå'}", callback_data="toggle:notify_status")
    kb.button(text=f"–ò–∑–º–µ–Ω—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {'‚úîÔ∏è' if prefs.get('notify_executor') else '‚ùå'}", callback_data="toggle:notify_executor")
    kb.button(text=f"–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {'‚úîÔ∏è' if prefs.get('notify_done') else '‚ùå'}", callback_data="toggle:notify_done")
    kb.button(text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {'‚úîÔ∏è' if prefs.get('notify_new_task') else '‚ùå'}", callback_data="toggle:notify_new_task")
    kb.button(text=f"–ñ–¥—ë—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è {'‚úîÔ∏è' if prefs.get('notify_approval') else '‚ùå'}", callback_data="toggle:notify_approval")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:back")
    kb.adjust(1)
    return kb.as_markup()


def services_keyboard():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—É–Ω–∫—Ç—ã: –£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø, –ü—Ä–æ—á–µ–µ, –∏ –ù–∞–∑–∞–¥
    kb = ReplyKeyboardBuilder()
    # –ù–∞–π–¥–µ–º id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ServiceId
    label_map = {name: _id for _id, name in ALLOWED_SERVICES.items()}
    for title in ("–£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", "–ü—Ä–æ—á–µ–µ"):
        if title in label_map:
            kb.row(KeyboardButton(text=title))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def duration_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="1 –¥–µ–Ω—å"), KeyboardButton(text="3 –¥–Ω—è"))
    kb.row(KeyboardButton(text="7 –¥–Ω–µ–π"), KeyboardButton(text="14 –¥–Ω–µ–π"))
    kb.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    return kb.as_markup(resize_keyboard=True)


def task_actions_inline(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üëÅ –î–µ—Ç–∞–ª–∏", callback_data=f"task:details:{task_id}")
    kb.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"task:comment:{task_id}")
    kb.adjust(1)
    return kb.as_markup()


def approval_actions_inline(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –ü–µ—Ä–µ–π—Ç–∏", callback_data=f"approval:goto:{task_id}")
    kb.adjust(1)
    return kb.as_markup()


def approval_detail_keyboard(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approval:ok:{task_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"approval:decline:{task_id}")
    kb.adjust(2)
    return kb.as_markup()


def link_to_task_inline(task_id: int, web_base: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Helpdesk", url=f"{web_base}/{task_id}")
    return kb.as_markup()


def reply_to_task_inline(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"task:comment:{task_id}")
    kb.adjust(1)
    return kb.as_markup()


def instructions_main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="1Ô∏è‚É£ 1–°"))
    kb.row(KeyboardButton(text="üìß –ü–æ—á—Ç–∞"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def instructions_1c_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="AR2"))
    kb.row(KeyboardButton(text="DM"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def instructions_email_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="üì± iPhone"))
    kb.row(KeyboardButton(text="ü§ñ Android"))
    kb.row(KeyboardButton(text="üíª Outlook"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def instructions_otp_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    kb.row(KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def otp_verification_keyboard():
    """OTP verification keyboard"""
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ"))
    kb.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)


# === Admin Keyboards ===

def admin_keyboard():
    """Admin panel main keyboard"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_categories")
    kb.button(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏", callback_data="admin_instructions")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(1)
    return kb.as_markup()


def admin_categories_keyboard():
    """Categories management keyboard"""
    kb = InlineKeyboardBuilder()
    
    # Add existing categories
    try:
        from instruction_manager import get_instruction_manager
        manager = get_instruction_manager()
        categories = manager.get_categories()
        
        for cat_id, category in categories.items():
            kb.button(
                text=f"{category['icon']} {category['name']}",
                callback_data=f"admin_category_{cat_id}"
            )
    except:
        pass
    
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(1)
    return kb.as_markup()


def admin_instructions_keyboard(category_id: str):
    """Instructions management keyboard for specific category"""
    kb = InlineKeyboardBuilder()
    
    # Add existing instructions
    try:
        from instruction_manager import get_instruction_manager
        manager = get_instruction_manager()
        instructions = manager.get_instructions(category_id)
        
        for inst_id, instruction in instructions.items():
            files_count = len(instruction["files"])
            kb.button(
                text=f"üìù {instruction['name']} ({files_count} —Ñ–∞–π–ª–æ–≤)",
                callback_data=f"admin_instruction_{category_id}_{inst_id}"
            )
    except:
        pass
    
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data=f"admin_add_instruction_{category_id}")
    kb.button(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"admin_upload_file_{category_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_categories")
    kb.adjust(1)
    return kb.as_markup()


def admin_instruction_keyboard(category_id: str, instruction_id: str):
    """Single instruction management keyboard"""
    kb = InlineKeyboardBuilder()
    
    kb.button(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"admin_upload_file_{category_id}_{instruction_id}")
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_instruction_{category_id}_{instruction_id}")
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_instruction_{category_id}_{instruction_id}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_category_{category_id}")
    kb.adjust(1)
    return kb.as_markup()


def admin_file_format_keyboard(category_id: str = None, instruction_id: str = None):
    """File format selection keyboard"""
    kb = InlineKeyboardBuilder()
    
    if category_id and instruction_id:
        # For existing instruction format selection
        kb.button(text="üìÑ PDF", callback_data=f"format_pdf_{category_id}_{instruction_id}")
        kb.button(text="üìù DOCX", callback_data=f"format_docx_{category_id}_{instruction_id}")
        kb.button(text="üìÑ DOC", callback_data=f"format_doc_{category_id}_{instruction_id}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_instruction_{category_id}_{instruction_id}")
    else:
        # For new instruction format selection
        kb.button(text="üìÑ PDF", callback_data="admin_file_format_pdf")
        kb.button(text="üìù DOCX", callback_data="admin_file_format_docx")
        kb.button(text="üìÑ DOC", callback_data="admin_file_format_doc")
        kb.button(text="üìÑ TXT", callback_data="admin_file_format_txt")
        kb.button(text="üé• MP4", callback_data="admin_file_format_mp4")
        kb.button(text="üé• AVI", callback_data="admin_file_format_avi")
        kb.button(text="üé• MOV", callback_data="admin_file_format_mov")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_categories")
    
    kb.adjust(2)
    return kb.as_markup()


def instructions_category_keyboard(category_id: str):
    """Instructions category keyboard"""
    kb = InlineKeyboardBuilder()
    
    manager = get_instruction_manager()
    instructions = manager.get_instructions_by_category(category_id)
    category = manager.get_category(category_id)
    
    if instructions:
        for instruction in instructions:
            kb.button(
                text=f"üìÑ {instruction['name']}",
                callback_data=f"instruction_{category_id}_{instruction['id']}"
            )
    else:
        kb.button(text="‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_instructions")
    
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
    kb.adjust(1)
    return kb.as_markup()


def instruction_keyboard(category_id: str, instruction_id: str):
    """Individual instruction keyboard"""
    kb = InlineKeyboardBuilder()
    
    manager = get_instruction_manager()
    instruction = manager.get_instruction(category_id, instruction_id)
    
    if instruction:
        # Show available formats
        for format_type in instruction.get('formats', []):
            kb.button(
                text=f"üìÑ {format_type.upper()}",
                callback_data=f"create_secure_link_{category_id}_{instruction_id}_{format_type}"
            )
    
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}")
    kb.adjust(1)
    return kb.as_markup()