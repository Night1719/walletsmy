from aiogram.types import KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import Dict
from config import ALLOWED_SERVICES


def phone_request_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    kb.add(KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))
    return kb.as_markup(resize_keyboard=True)


def main_menu_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(
        KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"),
        KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"),
    )
    kb.row(
        KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    )
    return kb.as_markup(resize_keyboard=True)


def my_tasks_menu_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.row(KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–µ"), KeyboardButton(text="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def settings_menu_keyboard(prefs: Dict[str, bool]):
    kb = InlineKeyboardBuilder()
    kb.button(text=f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {'‚úîÔ∏è' if prefs.get('notify_comment') else '‚ùå'}", callback_data="toggle:notify_comment")
    kb.button(text=f"–ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å {'‚úîÔ∏è' if prefs.get('notify_status') else '‚ùå'}", callback_data="toggle:notify_status")
    kb.button(text=f"–ò–∑–º–µ–Ω—ë–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {'‚úîÔ∏è' if prefs.get('notify_executor') else '‚ùå'}", callback_data="toggle:notify_executor")
    kb.button(text=f"–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {'‚úîÔ∏è' if prefs.get('notify_done') else '‚ùå'}", callback_data="toggle:notify_done")
    kb.button(text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {'‚úîÔ∏è' if prefs.get('notify_new_task') else '‚ùå'}", callback_data="toggle:notify_new_task")
    kb.button(text=f"–ñ–¥—ë—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è {'‚úîÔ∏è' if prefs.get('notify_approval') else '‚ùå'}", callback_data="toggle:notify_approval")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:back")
    kb.adjust(1)
    return kb.as_markup()


def services_keyboard():
    kb = ReplyKeyboardBuilder()
    for _id, name in ALLOWED_SERVICES.items():
        kb.row(KeyboardButton(text=name))
    kb.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)


def task_actions_inline(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üëÅ –î–µ—Ç–∞–ª–∏", callback_data=f"task:details:{task_id}")
    kb.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"task:comment:{task_id}")
    kb.adjust(1)
    return kb.as_markup()


def approval_actions_inline(task_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approval:ok:{task_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"approval:decline:{task_id}")
    kb.adjust(2)
    return kb.as_markup()


def link_to_task_inline(task_id: int, web_base: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Helpdesk", url=f"{web_base}/{task_id}")
    return kb.as_markup()