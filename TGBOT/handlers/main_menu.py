from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from keyboards import main_menu_keyboard, main_menu_after_auth_keyboard
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from api_client import search_users_by_name
from storage import get_session
from storage import get_session
from aiogram.filters import StateFilter

router = Router()


@router.message(F.text == "/menu")
async def main_menu_entry(message: types.Message, state: FSMContext):
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def open_my_tasks(message: types.Message, state: FSMContext):
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ CreatorId
    await state.clear()
    from handlers.my_tasks import send_my_open_tasks
    await send_my_open_tasks(message, state)


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())


@router.message(F.text == "üõ† Helpdesk")
async def go_helpdesk(message: types.Message, state: FSMContext):
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /start")
        return
    await message.answer("–ú–µ–Ω—é Helpdesk:", reply_markup=main_menu_keyboard())


@router.message(F.text == "üë§ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def employee_directory_prompt(message: types.Message, state: FSMContext):
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /start")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)")


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_root_from_helpdesk(message: types.Message, state: FSMContext):
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /start")
        return
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_after_auth_keyboard())


@router.message(
    StateFilter(None),
    F.text.regexp(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]{2,}$")
    & ~(
        (F.text == "–£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø") |
        (F.text == "–ü—Ä–æ—á–µ–µ") |
        (F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") |
        (F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    )
)
async def employee_directory_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    users = search_users_by_name(query)[:10]
    if not users:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return
    lines = []
    for u in users:
        name = u.get("Name") or "‚Äî"
        title = u.get("Title") or u.get("Position") or "‚Äî"
        email = u.get("Email") or u.get("EMail") or "‚Äî"
        phones = []
        for k in ("MobilePhone", "WorkPhone", "InternalPhone", "Phone"):
            v = u.get(k)
            if v:
                phones.append(str(v))
        phone_str = ", ".join(phones) if phones else "‚Äî"
        lines.append(f"{name}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {title}\nEmail: {email}\n–¢–µ–ª–µ—Ñ–æ–Ω(—ã): {phone_str}")
    await message.answer("\n\n".join(lines))