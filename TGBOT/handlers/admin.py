"""
Admin interface for managing instructions dynamically.
Allows adding, editing, and removing instructions without code changes.
"""
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from keyboards import admin_keyboard, admin_categories_keyboard, admin_instructions_keyboard
from instruction_manager import get_instruction_manager
from config import ADMIN_USER_IDS
import logging
import os
from pathlib import Path

router = Router()
logger = logging.getLogger(__name__)

# Admin states
class AdminStates:
    waiting_for_category_name = "waiting_for_category_name"
    waiting_for_category_icon = "waiting_for_category_icon"
    waiting_for_instruction_name = "waiting_for_instruction_name"
    waiting_for_instruction_description = "waiting_for_instruction_description"
    waiting_for_file_upload = "waiting_for_file_upload"
    waiting_for_file_format = "waiting_for_file_format"

def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    return user_id in ADMIN_USER_IDS

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """Show admin panel"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_categories")
async def admin_categories(callback: types.CallbackQuery):
    """Show categories management"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    manager = get_instruction_manager()
    categories = manager.get_categories()
    
    text = "üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
    for cat_id, category in categories.items():
        instructions_count = len(category["instructions"])
        text += f"{category['icon']} <b>{category['name']}</b>\n"
        text += f"   üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {instructions_count}\n"
        text += f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {category['description']}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_categories_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_category")
async def admin_add_category_start(callback: types.CallbackQuery, state: FSMContext):
    """Start adding new category"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_category_name)
    await callback.message.edit_text(
        "üìÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>network</code>, <code>software</code>, <code>hardware</code>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_category_name)
async def admin_add_category_name(message: types.Message, state: FSMContext):
    """Process category ID"""
    category_id = message.text.strip().lower()
    
    # Validate category ID
    if not category_id.replace('_', '').isalnum():
        await message.answer(
            "‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    manager = get_instruction_manager()
    if manager.get_category(category_id):
        await message.answer(
            f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è <code>{category_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.waiting_for_category_icon)
    await message.answer(
        f"‚úÖ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <code>{category_id}</code>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–°–µ—Ç—å</b>, <b>–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ</b>",
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_for_category_icon)
async def admin_add_category_icon(message: types.Message, state: FSMContext):
    """Process category name and ask for icon"""
    category_name = message.text.strip()
    
    await state.update_data(category_name=category_name)
    await state.set_state(AdminStates.waiting_for_category_icon)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{category_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: üåê, üíª, üîß, üì±, üìä\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏:",
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_for_category_icon)
async def admin_add_category_finish(message: types.Message, state: FSMContext):
    """Finish adding category"""
    icon = message.text.strip()
    
    data = await state.get_data()
    category_id = data["category_id"]
    category_name = data["category_name"]
    
    manager = get_instruction_manager()
    success = manager.add_category(
        category_id=category_id,
        name=category_name,
        icon=icon,
        description=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name}"
    )
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üÜî ID: <code>{category_id}</code>\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{category_name}</b>\n"
            f"üé® –ò–∫–æ–Ω–∫–∞: {icon}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=admin_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_category_"))
async def admin_category_instructions(callback: types.CallbackQuery):
    """Show instructions in category"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    category_id = callback.data.replace("admin_category_", "")
    manager = get_instruction_manager()
    category = manager.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    instructions = manager.get_instructions(category_id)
    
    text = f"üìÅ <b>{category['icon']} {category['name']}</b>\n\n"
    text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {category['description']}\n\n"
    text += f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)}\n\n"
    
    if instructions:
        text += "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
        for inst_id, instruction in instructions.items():
            files_count = len(instruction["files"])
            text += f"‚Ä¢ <b>{instruction['name']}</b>\n"
            text += f"  üìÑ –§–∞–π–ª–æ–≤: {files_count}\n"
            text += f"  üìù {instruction['description']}\n\n"
    else:
        text += "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_instructions_keyboard(category_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_add_instruction_"))
async def admin_add_instruction_start(callback: types.CallbackQuery, state: FSMContext):
    """Start adding new instruction"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    category_id = callback.data.replace("admin_add_instruction_", "")
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.waiting_for_instruction_name)
    
    await callback.message.edit_text(
        f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_id}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>setup</code>, <code>troubleshooting</code>, <code>guide</code>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_instruction_name)
async def admin_add_instruction_name(message: types.Message, state: FSMContext):
    """Process instruction ID"""
    instruction_id = message.text.strip().lower()
    
    # Validate instruction ID
    if not instruction_id.replace('_', '').isalnum():
        await message.answer(
            "‚ùå ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    category_id = data["category_id"]
    
    manager = get_instruction_manager()
    if manager.get_instruction(category_id, instruction_id):
        await message.answer(
            f"‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è <code>{instruction_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <code>{category_id}</code>\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(instruction_id=instruction_id)
    await state.set_state(AdminStates.waiting_for_instruction_description)
    await message.answer(
        f"‚úÖ ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: <code>{instruction_id}</code>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏</b>, <b>–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫</b>",
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_for_instruction_description)
async def admin_add_instruction_description(message: types.Message, state: FSMContext):
    """Process instruction name and ask for description"""
    instruction_name = message.text.strip()
    
    await state.update_data(instruction_name=instruction_name)
    await state.set_state(AdminStates.waiting_for_instruction_description)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{instruction_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</code> –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_for_instruction_description)
async def admin_add_instruction_finish(message: types.Message, state: FSMContext):
    """Finish adding instruction"""
    description = message.text.strip()
    if description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = ""
    
    data = await state.get_data()
    category_id = data["category_id"]
    instruction_id = data["instruction_id"]
    instruction_name = data["instruction_name"]
    
    manager = get_instruction_manager()
    success = manager.add_instruction(
        category_id=category_id,
        instruction_id=instruction_id,
        name=instruction_name,
        description=description
    )
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_id}</code>\n"
            f"üÜî ID: <code>{instruction_id}</code>\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{instruction_name}</b>\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=admin_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_upload_file_"))
async def admin_upload_file_start(callback: types.CallbackQuery, state: FSMContext):
    """Start file upload process"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # Parse category and instruction from callback data
    parts = callback.data.replace("admin_upload_file_", "").split("_")
    category_id = parts[0]
    instruction_id = "_".join(parts[1:])
    
    await state.update_data(
        category_id=category_id,
        instruction_id=instruction_id
    )
    await state.set_state(AdminStates.waiting_for_file_format)
    
    await callback.message.edit_text(
        f"üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_id}</code>\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <code>{instruction_id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìÑ PDF", callback_data=f"format_pdf_{category_id}_{instruction_id}")],
                [types.InlineKeyboardButton(text="üìù DOCX", callback_data=f"format_docx_{category_id}_{instruction_id}")],
                [types.InlineKeyboardButton(text="üìÑ DOC", callback_data=f"format_doc_{category_id}_{instruction_id}")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_category_{category_id}")]
            ]
        ),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("format_"))
async def admin_upload_file_format(callback: types.CallbackQuery, state: FSMContext):
    """Process file format selection"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    parts = callback.data.replace("format_", "").split("_")
    file_format = parts[0]
    category_id = parts[1]
    instruction_id = "_".join(parts[2:])
    
    await state.update_data(
        file_format=file_format,
        category_id=category_id,
        instruction_id=instruction_id
    )
    await state.set_state(AdminStates.waiting_for_file_upload)
    
    await callback.message.edit_text(
        f"üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_id}</code>\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <code>{instruction_id}</code>\n"
        f"–§–æ—Ä–º–∞—Ç: <b>{file_format.upper()}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç:",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_file_upload, F.document)
async def admin_upload_file_process(message: types.Message, state: FSMContext):
    """Process uploaded file"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    data = await state.get_data()
    category_id = data["category_id"]
    instruction_id = data["instruction_id"]
    file_format = data["file_format"]
    
    # Get file info
    file_id = message.document.file_id
    file_name = message.document.file_name
    file_size = message.document.file_size
    
    # Validate file format
    expected_extensions = {
        "pdf": [".pdf"],
        "docx": [".docx"],
        "doc": [".doc"]
    }
    
    file_ext = Path(file_name).suffix.lower()
    if file_ext not in expected_extensions.get(file_format, []):
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è {file_format.upper()}, –ø–æ–ª—É—á–µ–Ω {file_ext}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # Validate file size (max 50MB)
    if file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    try:
        # Download file
        bot = message.bot
        file = await bot.get_file(file_id)
        file_path = f"{category_id}/{instruction_id}/{instruction_id}.{file_format}"
        
        # Create directory
        manager = get_instruction_manager()
        file_dir = manager.instructions_dir / category_id / instruction_id
        file_dir.mkdir(parents=True, exist_ok=True)
        
        # Save file
        full_path = file_dir / f"{instruction_id}.{file_format}"
        await bot.download_file(file.file_path, full_path)
        
        # Add file to instruction
        success = manager.add_file(
            category_id=category_id,
            instruction_id=instruction_id,
            file_format=file_format,
            file_path=file_path
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_id}</code>\n"
                f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <code>{instruction_id}</code>\n"
                f"üìÑ –§–æ—Ä–º–∞—Ç: <b>{file_format.upper()}</b>\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                f"üìÅ –ü—É—Ç—å: <code>{file_path}</code>",
                reply_markup=admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.",
                reply_markup=admin_keyboard()
            )
    
    except Exception as e:
        logger.error(f"Error uploading file: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=admin_keyboard()
        )
    
    await state.clear()

@router.message(AdminStates.waiting_for_file_upload)
async def admin_upload_file_invalid(message: types.Message):
    """Handle invalid file upload"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
    )

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    """Back to admin panel"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()