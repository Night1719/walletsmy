"""
Admin interface for managing instructions dynamically.
Allows adding, editing, and removing instructions without code changes.
"""
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards import admin_keyboard, admin_categories_keyboard, admin_instructions_keyboard, admin_file_format_keyboard
from instruction_manager import get_instruction_manager
from config import ADMIN_USER_IDS
import logging
import os
from pathlib import Path

router = Router()
logger = logging.getLogger(__name__)

# Admin states
class AdminStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_icon = State()
    waiting_for_instruction_name = State()
    waiting_for_instruction_description = State()
    waiting_for_file_upload = State()
    waiting_for_file_format = State()

def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    return user_id in ADMIN_USER_IDS

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """Show admin panel"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_categories")
async def admin_categories(callback: types.CallbackQuery):
    """Show categories management"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    manager = get_instruction_manager()
    categories = manager.get_all_categories()
    
    text = "üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
    if categories:
        for cat in categories:
            text += f"‚Ä¢ {cat['icon']} {cat['name']} (<code>{cat['id']}</code>)\n"
    else:
        text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_categories_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_category")
async def admin_add_category(callback: types.CallbackQuery, state: FSMContext):
    """Start adding new category"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await callback.message.edit_text(
        "üìÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>network</code>, <code>software</code>, <code>hardware</code>",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_category_name)
    await callback.answer()

@router.message(AdminStates.waiting_for_category_name)
async def admin_add_category_name(message: types.Message, state: FSMContext):
    """Process category ID"""
    category_id = message.text.strip().lower()
    
    # Validate category ID
    if not category_id.replace('_', '').isalnum():
        await message.answer(
            "‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    manager = get_instruction_manager()
    if manager.get_category(category_id):
        await message.answer(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID:"
        )
        return
    
    # Store category ID and ask for name
    await state.update_data(category_id=category_id)
    await message.answer(
        "‚úÖ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–Ω—è—Ç\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    await state.set_state(AdminStates.waiting_for_category_icon)

@router.message(AdminStates.waiting_for_category_icon)
async def admin_add_category_icon(message: types.Message, state: FSMContext):
    """Process category name and ask for icon"""
    category_name = message.text.strip()
    
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Store category name and ask for icon
    await state.update_data(category_name=category_name)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–Ω—è—Ç–æ\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É (—ç–º–æ–¥–∑–∏) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: üìÅ, üîß, üíª, üì±"
    )
    await state.set_state(AdminStates.waiting_for_category_icon)

@router.message(AdminStates.waiting_for_category_icon)
async def admin_add_category_final(message: types.Message, state: FSMContext):
    """Process category icon and create category"""
    icon = message.text.strip()
    
    if not icon:
        await message.answer("‚ùå –ò–∫–æ–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Get stored data
    data = await state.get_data()
    category_id = data.get('category_id')
    category_name = data.get('category_name')
    
    if not category_id or not category_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # Create category
    manager = get_instruction_manager()
    success = manager.add_category(category_id, category_name, icon)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"ID: <code>{category_id}</code>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {icon} {category_name}",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_category_"))
async def admin_category_actions(callback: types.CallbackQuery):
    """Handle category actions"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action = callback.data.replace("admin_category_", "")
    
    if action == "back":
        await admin_categories(callback)
    else:
        # Handle other category actions
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(F.data == "admin_instructions")
async def admin_instructions(callback: types.CallbackQuery):
    """Show instructions management"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    manager = get_instruction_manager()
    categories = manager.get_all_categories()
    
    text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏</b>\n\n"
    if categories:
        for cat in categories:
            instructions = manager.get_instructions_by_category(cat['id'])
            text += f"<b>{cat['icon']} {cat['name']}</b> ({len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)\n"
            for inst in instructions:
                text += f"  ‚Ä¢ {inst['name']}\n"
            text += "\n"
    else:
        text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    kb = InlineKeyboardBuilder()
    
    if categories:
        for cat in categories:
            kb.button(
                text=f"{cat['icon']} {cat['name']}",
                callback_data=f"admin_category_{cat['id']}"
            )
    else:
        kb.button(text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="no_categories")
    
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_add_instruction_"))
async def admin_add_instruction(callback: types.CallbackQuery, state: FSMContext):
    """Start adding new instruction"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    category_id = callback.data.replace("admin_add_instruction_", "")
    await state.update_data(category_id=category_id)
    
    await callback.message.edit_text(
        "üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_instruction_name)
    await callback.answer()

@router.message(AdminStates.waiting_for_instruction_name)
async def admin_add_instruction_name(message: types.Message, state: FSMContext):
    """Process instruction name"""
    instruction_name = message.text.strip()
    
    if not instruction_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(instruction_name=instruction_name)
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç–æ\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
    )
    await state.set_state(AdminStates.waiting_for_instruction_description)

@router.message(AdminStates.waiting_for_instruction_description)
async def admin_add_instruction_description(message: types.Message, state: FSMContext):
    """Process instruction description"""
    description = message.text.strip()
    
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=description)
    
    # Ask for file format
    await message.answer(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        reply_markup=admin_file_format_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_file_format)

@router.callback_query(F.data.startswith("admin_file_format_"))
async def admin_file_format_selected(callback: types.CallbackQuery, state: FSMContext):
    """Process file format selection"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    file_format = callback.data.replace("admin_file_format_", "")
    await state.update_data(file_format=file_format)
    
    await callback.message.edit_text(
        f"üìé <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        f"–§–æ—Ä–º–∞—Ç: <code>{file_format}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ {file_format.upper()}:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_file_upload)
    await callback.answer()

@router.message(AdminStates.waiting_for_file_upload, F.document)
async def admin_file_uploaded(message: types.Message, state: FSMContext):
    """Process uploaded file"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    document = message.document
    file_name = document.file_name
    file_id = document.file_id
    
    # Get stored data
    data = await state.get_data()
    category_id = data.get('category_id')
    instruction_name = data.get('instruction_name')
    description = data.get('description')
    file_format = data.get('file_format')
    
    if not all([category_id, instruction_name, description, file_format]):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # Validate file format
    if not file_name.lower().endswith(f'.{file_format.lower()}'):
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è {file_format.upper()}, –ø–æ–ª—É—á–µ–Ω {file_name.split('.')[-1].upper()}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # Download file
    try:
        file = await message.bot.get_file(file_id)
        file_path = f"instructions/{category_id}/{instruction_name}.{file_format}"
        
        # Create directory if not exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # Download file
        await message.bot.download_file(file.file_path, file_path)
        
        # Add instruction to manager
        manager = get_instruction_manager()
        success = manager.add_instruction(
            category_id=category_id,
            instruction_id=instruction_name.lower().replace(' ', '_'),
            name=instruction_name,
            description=description,
            file_format=file_format,
            file_path=file_path
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {instruction_name}\n"
                f"–§–æ—Ä–º–∞—Ç: {file_format.upper()}\n"
                f"–§–∞–π–ª: {file_name}",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    except Exception as e:
        logger.error(f"Error processing file upload: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
    
    await state.clear()

@router.message(AdminStates.waiting_for_file_upload)
async def admin_file_upload_invalid(message: types.Message):
    """Handle invalid file upload"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
    )

@router.callback_query(F.data.startswith("admin_instruction_"))
async def admin_instruction_actions(callback: types.CallbackQuery):
    """Handle instruction actions"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action = callback.data.replace("admin_instruction_", "")
    
    if action == "back":
        await admin_instructions(callback)
    else:
        # Handle other instruction actions
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    """Return to admin main menu"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "no_categories")
async def no_categories(callback: types.CallbackQuery):
    """Handle no categories case"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
