from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from keyboards import phone_request_keyboard, main_menu_keyboard
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from storage import get_session
from states import AuthStates

router = Router()


@router.message(F.text.in_({"/start", "/help"}))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    session = get_session(message.from_user.id)
    if session and session.get("intraservice_id"):
        await message.answer(
            f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {session.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!", reply_markup=main_menu_keyboard()
        )
        return

    # –ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", request_contact=False))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ‚Äòüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è‚Äô.", reply_markup=kb.as_markup(resize_keyboard=True))


@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def reg_start(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.awaiting_phone)
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=kb.as_markup(resize_keyboard=True))


@router.message(AuthStates.awaiting_phone, F.contact)
async def reg_collect_phone(message: types.Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(reg_phone=message.contact.phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")


@router.message(AuthStates.awaiting_phone, F.text)
async def reg_collect_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    data = await state.get_data()
    phone = data.get("reg_phone")
    if not phone:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–≤ –ë–î/—Ñ–∞–π–ª/–æ—Ç–ø—Ä–∞–≤–∫–∞)
    await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=_post_auth_menu())
    await state.clear()


def _post_auth_menu():
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üõ† Helpdesk"))
    kb.row(types.KeyboardButton(text="üë§ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"))
    return kb.as_markup(resize_keyboard=True)