from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from keyboards import phone_request_keyboard, main_menu_keyboard
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from storage import get_session, set_session
from api_client import get_user_by_phone
from states import AuthStates
from api_client import create_task
from config import REGISTRATION_SERVICE_ID, REGISTRATION_CREATOR_ID, REGISTRATION_STATUS_ID

router = Router()


@router.message(F.text.in_({"/start", "/help"}))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    session = get_session(message.from_user.id)
    if session and session.get("intraservice_id"):
        await message.answer(
            f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {session.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!", reply_markup=main_menu_keyboard()
        )
        return

    # –ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"))
    kb.row(types.KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.as_markup(resize_keyboard=True))
@router.message(F.text == "üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def auth_start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    await state.set_state(AuthStates.awaiting_phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=kb.as_markup(resize_keyboard=True))


@router.message(AuthStates.awaiting_phone, F.contact)
async def auth_or_reg_by_phone(message: types.Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    phone = message.contact.phone_number
    user = get_user_by_phone(phone)
    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º Helpdesk/–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        session = {
            "intraservice_id": user.get("Id"),
            "phone": phone,
            "name": user.get("Name"),
            "stage": "main_menu",
        }
        set_session(message.from_user.id, session)
        await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.get('Name')}", reply_markup=_post_auth_menu())
        await state.clear()
        return
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø—Ä–æ—Å–∏–º –§–ò–û
    await state.update_data(reg_phone=phone)
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")


@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def reg_start(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.awaiting_phone)
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=kb.as_markup(resize_keyboard=True))


@router.message(AuthStates.awaiting_phone, F.contact)
async def reg_collect_phone(message: types.Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(reg_phone=message.contact.phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")


@router.message(AuthStates.awaiting_phone, F.text)
async def reg_collect_name(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    data = await state.get_data()
    phone = data.get("reg_phone")
    if not phone:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ Helpdesk
    name = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    description = f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–§–ò–û: {fio}"
    payload = {
        "Name": name,
        "Description": description,
        "CreatorId": int(REGISTRATION_CREATOR_ID) if REGISTRATION_CREATOR_ID else None,
        "ServiceId": int(REGISTRATION_SERVICE_ID) if REGISTRATION_SERVICE_ID else None,
        "StatusId": REGISTRATION_STATUS_ID or 27,
    }
    task_id = create_task(**payload)

    if task_id:
        await message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ.\n–ó–∞—è–≤–∫–∞ #{task_id}", reply_markup=_post_auth_menu())
    else:
        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=_post_auth_menu())
    await state.clear()


def _post_auth_menu():
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text="üõ† Helpdesk"))
    kb.row(types.KeyboardButton(text="üë§ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"))
    return kb.as_markup(resize_keyboard=True)