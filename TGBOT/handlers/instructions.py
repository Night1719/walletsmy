"""
Instructions handlers with email OTP verification.
Fixed version for Windows users.
"""
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards import instructions_main_keyboard, instructions_category_keyboard, instruction_keyboard, otp_verification_keyboard, main_menu_after_auth_keyboard
from states import InstructionsStates
from storage import get_session, set_session
from file_server import get_instruction_files, get_instruction_info
from config import MINIAPP_URL, MINIAPP_MODE, CORP_EMAIL_DOMAIN, INSTRUCTIONS_OTP_EXPIRE_MINUTES
from instruction_manager import get_instruction_manager
import random
import time
import logging
import smtplib
from email.message import EmailMessage
from config import SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_FROM, SMTP_USE_TLS, SMTP_USE_SSL

router = Router()
logger = logging.getLogger(__name__)

# Store OTP codes temporarily
_otp_codes = {}

@router.message(F.text == "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def instructions_start(message: types.Message, state: FSMContext):
    """Start instructions access with OTP verification"""
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /start")
        return
    
    # Check if user already has access to instructions
    if session.get("instructions_access"):
        await state.set_state(InstructionsStates.main_menu)
        await message.answer("üìö –†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", reply_markup=instructions_main_keyboard())
        return
    
    # Request email for OTP verification
    await state.set_state(InstructionsStates.awaiting_otp_phone)
    await message.answer(
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:",
        reply_markup=otp_verification_keyboard()
    )


@router.message(InstructionsStates.awaiting_otp_phone, F.text)
async def instructions_email_input(message: types.Message, state: FSMContext):
    """Handle email input for instructions OTP"""
    email = message.text.strip()
    
    # Validate email format
    if "@" not in email or "." not in email.split("@")[1]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Validate corporate domain if configured
    if CORP_EMAIL_DOMAIN:
        domains = [d.strip().lower() for d in CORP_EMAIL_DOMAIN.replace(';', ',').split(',') if d.strip()]
        if domains and not any(email.lower().endswith('@' + d) for d in domains):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–æ–º–µ–Ω).")
            return
    
    # Generate and send OTP
    otp = str(random.randint(100000, 999999))
    otp_timestamp = int(time.time())
    
    _otp_codes[str(message.from_user.id)] = {
        "code": otp,
        "timestamp": otp_timestamp,
        "email": email
    }
    
    # Send OTP via email
    try:
        if not SMTP_HOST or not SMTP_FROM:
            raise RuntimeError("SMTP not configured")
        
        msg = EmailMessage()
        msg['Subject'] = '–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º'
        msg['From'] = SMTP_FROM
        msg['To'] = email
        msg.set_content(f'–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: {otp}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.')
        
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as s:
            if SMTP_USE_TLS:
                s.starttls()
            if SMTP_USER and SMTP_PASS:
                s.login(SMTP_USER, SMTP_PASS)
            s.send_message(msg)
        
        await message.answer(
            f"üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email {email}\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
        )
        await state.set_state(InstructionsStates.awaiting_otp_code)
        
    except Exception as e:
        logger.error(f"Error sending OTP email: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ö–æ–¥: {otp}\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
        )
        await state.set_state(InstructionsStates.awaiting_otp_code)


@router.message(InstructionsStates.awaiting_otp_code, F.text)
async def instructions_otp_verify(message: types.Message, state: FSMContext):
    """Verify OTP code for instructions access"""
    user_id = str(message.from_user.id)
    entered_code = message.text.strip()
    
    if user_id not in _otp_codes:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    otp_data = _otp_codes[user_id]
    current_time = int(time.time())
    
    # Check if code expired
    if current_time - otp_data["timestamp"] > INSTRUCTIONS_OTP_EXPIRE_MINUTES * 60:
        await message.answer("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        del _otp_codes[user_id]
        await state.clear()
        return
    
    # Verify code
    if entered_code != otp_data["code"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Success - grant access
    del _otp_codes[user_id]
    
    # Update session
    session = get_session(message.from_user.id)
    session["instructions_access"] = True
    set_session(message.from_user.id, session)
    
    await state.set_state(InstructionsStates.main_menu)
    await message.answer(
        "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n"
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=instructions_main_keyboard()
    )


@router.callback_query(F.data == "resend_otp")
async def resend_otp(callback: types.CallbackQuery, state: FSMContext):
    """Resend OTP code"""
    user_id = str(callback.from_user.id)
    
    if user_id not in _otp_codes:
        await callback.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    otp_data = _otp_codes[user_id]
    email = otp_data["email"]
    
    # Generate new OTP
    otp = str(random.randint(100000, 999999))
    otp_timestamp = int(time.time())
    
    _otp_codes[user_id] = {
        "code": otp,
        "timestamp": otp_timestamp,
        "email": email
    }
    
    # Send new OTP
    try:
        msg = EmailMessage()
        msg['Subject'] = '–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º (–ø–æ–≤—Ç–æ—Ä–Ω–æ)'
        msg['From'] = SMTP_FROM
        msg['To'] = email
        msg.set_content(f'–í–∞—à –Ω–æ–≤—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: {otp}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.')
        
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as s:
            if SMTP_USE_TLS:
                s.starttls()
            if SMTP_USER and SMTP_PASS:
                s.login(SMTP_USER, SMTP_PASS)
            s.send_message(msg)
        
        await callback.answer("üìß –ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email")
        
    except Exception as e:
        logger.error(f"Error resending OTP: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "cancel_otp")
async def cancel_otp(callback: types.CallbackQuery, state: FSMContext):
    """Cancel OTP verification"""
    user_id = str(callback.from_user.id)
    if user_id in _otp_codes:
        del _otp_codes[user_id]
    
    await state.clear()
    await callback.message.edit_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data == "close_instructions")
async def close_instructions(callback: types.CallbackQuery, state: FSMContext):
    """Close instructions menu"""
    await state.clear()
    await callback.message.edit_text("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def category_selected(callback: types.CallbackQuery, state: FSMContext):
    """Handle category selection"""
    category_id = callback.data.replace("category_", "")
    
    manager = get_instruction_manager()
    category = manager.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    instructions = manager.get_instructions_by_category(category_id)
    
    if not instructions:
        await callback.message.edit_text(
            f"üìÅ {category['icon']} {category['name']}\n\n"
            "‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
            ]])
        )
    else:
        await callback.message.edit_text(
            f"üìÅ {category['icon']} {category['name']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:",
            reply_markup=instructions_category_keyboard(category_id)
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("instruction_"))
async def instruction_selected(callback: types.CallbackQuery, state: FSMContext):
    """Handle instruction selection"""
    parts = callback.data.replace("instruction_", "").split("_")
    if len(parts) != 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    category_id, instruction_id = parts
    
    manager = get_instruction_manager()
    instruction = manager.get_instruction(category_id, instruction_id)
    
    if not instruction:
        await callback.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.message.edit_text(
        f"üìÑ {instruction['name']}\n\n"
        f"üìù {instruction['description']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        reply_markup=instruction_keyboard(category_id, instruction_id)
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    """Return to categories list"""
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=instructions_main_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("create_secure_link_"))
async def create_secure_link(callback: types.CallbackQuery, state: FSMContext):
    """Create secure link for instruction file"""
    parts = callback.data.replace("create_secure_link_", "").split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    category_id, instruction_id, file_format = parts
    
    manager = get_instruction_manager()
    instruction = manager.get_instruction(category_id, instruction_id)
    
    if not instruction:
        await callback.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # Create secure link via Mini App API
    try:
        import requests
        
        # Prepare data for Mini App API
        instruction_data = f"{category_id}_{instruction_id}"
        
        # Call Mini App API to create secure link
        miniapp_api_url = f"{MINIAPP_URL.replace('/miniapp', '')}/api/secure/create-link"
        
        response = requests.post(miniapp_api_url, json={
            "instruction_data": instruction_data,
            "file_format": file_format,
            "user_id": callback.from_user.id
        }, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            secure_url = data.get("secure_url")
            
            if secure_url:
                # Send Mini App button
                await callback.message.edit_text(
                    f"üìÑ {instruction['name']} ({file_format.upper()})\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 40 –º–∏–Ω—É—Ç\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üì± –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
                            web_app=types.WebAppInfo(url=secure_url)
                        )
                    ], [
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"instruction_{category_id}_{instruction_id}")
                    ]])
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    
    except Exception as e:
        logger.error(f"Error creating secure link: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


@router.message(InstructionsStates.main_menu)
async def instructions_main_menu_handler(message: types.Message, state: FSMContext):
    """Handle main menu navigation"""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_after_auth_keyboard())
    else:
        # Show inline categories again
        await message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=instructions_main_keyboard()
        )