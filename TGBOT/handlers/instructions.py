from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from keyboards import (
    instructions_main_keyboard, 
    instructions_1c_keyboard, 
    instructions_email_keyboard,
    instructions_otp_keyboard,
    main_menu_after_auth_keyboard
)
from aiogram.types import WebAppInfo
import requests
from storage import get_session
from states import InstructionsStates
from config import (
    SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_FROM, 
    SMTP_USE_TLS, SMTP_USE_SSL, CORP_EMAIL_DOMAIN, 
    INSTRUCTIONS_OTP_EXPIRE_MINUTES, MINIAPP_URL, MINIAPP_WEBHOOK_URL
)
from api_client import get_user_by_phone, get_user_by_email
from file_server import get_instruction_files, save_temp_file, cleanup_temp_file, get_instruction_info
from instruction_manager import get_instruction_manager
import smtplib
from email.message import EmailMessage
import random
import time
import logging
import os

router = Router()
logger = logging.getLogger(__name__)

# Store OTP codes temporarily (in production, use Redis or database)
_otp_codes = {}


def _send_otp_email(email: str, otp: str) -> bool:
    """Send OTP code to email"""
    try:
        if not SMTP_HOST or not SMTP_FROM:
            logger.error("SMTP is not configured")
            return False
            
        msg = EmailMessage()
        msg['Subject'] = '–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º'
        msg['From'] = SMTP_FROM
        msg['To'] = email
        msg.set_content(f"–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: {otp}. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω {INSTRUCTIONS_OTP_EXPIRE_MINUTES} –º–∏–Ω—É—Ç.")
        
        if SMTP_USE_SSL:
            server_cls = smtplib.SMTP_SSL
        else:
            server_cls = smtplib.SMTP
            
        with server_cls(SMTP_HOST, SMTP_PORT) as s:
            if SMTP_USE_TLS and not SMTP_USE_SSL:
                s.starttls()
            if SMTP_USER:
                try:
                    s.login(SMTP_USER, SMTP_PASS)
                except smtplib.SMTPAuthenticationError:
                    # Try different user variants
                    user_variants = {SMTP_USER}
                    if "@" in SMTP_USER:
                        user_variants.add(SMTP_USER.split("@")[0])
                    else:
                        if "\\" in SMTP_USER:
                            user_variants.add(SMTP_USER.split("\\")[-1])
                    authed = False
                    for u in user_variants:
                        try:
                            s.login(u, SMTP_PASS)
                            authed = True
                            break
                        except smtplib.SMTPAuthenticationError:
                            continue
                    if not authed:
                        raise
            s.send_message(msg)
        return True
    except Exception as e:
        logger.error(f"Failed to send OTP to {email}: {e}")
        return False


@router.message(F.text == "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def instructions_start(message: types.Message, state: FSMContext):
    """Start instructions access with OTP verification"""
    session = get_session(message.from_user.id)
    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /start")
        return
    
    # Check if user already has access to instructions
    if session.get("instructions_access"):
        await state.set_state(InstructionsStates.main_menu)
        await message.answer("üìö –†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", reply_markup=instructions_main_keyboard())
        return
    
    # Request email for OTP verification
    await state.set_state(InstructionsStates.awaiting_otp_phone)
    await message.answer(
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:",
        reply_markup=instructions_otp_keyboard()
    )


@router.message(InstructionsStates.awaiting_otp_phone, F.contact)
async def instructions_phone_contact(message: types.Message, state: FSMContext):
    """Handle phone contact for instructions OTP"""
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    phone = message.contact.phone_number
    user = get_user_by_phone(phone)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return
    
    email = user.get("Email") or user.get("EMail")
    if not email:
        await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω email. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return
    
    # Generate and send OTP
    otp = str(random.randint(100000, 999999))
    otp_timestamp = int(time.time())
    
    _otp_codes[str(message.from_user.id)] = {
        "otp": otp,
        "timestamp": otp_timestamp,
        "email": email
    }
    
    if _send_otp_email(email, otp):
        await state.set_state(InstructionsStates.awaiting_otp_code)
        await message.answer(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()


@router.message(InstructionsStates.awaiting_otp_phone, F.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def instructions_phone_manual(message: types.Message, state: FSMContext):
    """Handle manual phone input for instructions OTP"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@router.message(InstructionsStates.awaiting_otp_phone, F.text.regexp(r"^[\+]?[0-9\s\-\(\)]{10,}$"))
async def instructions_phone_manual_input(message: types.Message, state: FSMContext):
    """Handle manual phone number input"""
    phone = message.text.strip()
    user = get_user_by_phone(phone)
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return
    
    email = user.get("Email") or user.get("EMail")
    if not email:
        await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω email. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return
    
    # Generate and send OTP
    otp = str(random.randint(100000, 999999))
    otp_timestamp = int(time.time())
    
    _otp_codes[str(message.from_user.id)] = {
        "otp": otp,
        "timestamp": otp_timestamp,
        "email": email
    }
    
    if _send_otp_email(email, otp):
        await state.set_state(InstructionsStates.awaiting_otp_code)
        await message.answer(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()


@router.message(InstructionsStates.awaiting_otp_code, F.text.regexp(r"^\d{6}$"))
async def instructions_verify_otp(message: types.Message, state: FSMContext):
    """Verify OTP code for instructions access"""
    user_id = str(message.from_user.id)
    otp_data = _otp_codes.get(user_id)
    
    if not otp_data:
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    if int(time.time()) - otp_data["timestamp"] > INSTRUCTIONS_OTP_EXPIRE_MINUTES * 60:
        await message.answer("–ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        del _otp_codes[user_id]
        await state.clear()
        return
    
    if message.text.strip() != otp_data["otp"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return
    
    # Grant access to instructions
    session = get_session(message.from_user.id)
    if session:
        session["instructions_access"] = True
        from storage import set_session
        set_session(message.from_user.id, session)
    
    # Clean up OTP
    del _otp_codes[user_id]
    
    await state.set_state(InstructionsStates.main_menu)
    await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!", reply_markup=instructions_main_keyboard())


@router.message(InstructionsStates.main_menu, F.text == "1Ô∏è‚É£ 1–°")
async def instructions_1c(message: types.Message, state: FSMContext):
    """Show 1C instructions menu"""
    await state.set_state(InstructionsStates.choosing_1c_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 1–°:", reply_markup=instructions_1c_keyboard())


@router.message(InstructionsStates.main_menu, F.text == "üìß –ü–æ—á—Ç–∞")
async def instructions_email(message: types.Message, state: FSMContext):
    """Show email instructions menu"""
    await state.set_state(InstructionsStates.choosing_email_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ—á—Ç–µ:", reply_markup=instructions_email_keyboard())

@router.message(InstructionsStates.main_menu)
async def instructions_dynamic_categories(message: types.Message, state: FSMContext):
    """Show dynamic instruction categories"""
    try:
        manager = get_instruction_manager()
        categories = manager.get_categories()
        
        # Create dynamic keyboard
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        
        for cat_id, category in categories.items():
            instructions_count = len(category["instructions"])
            kb.button(
                text=f"{category['icon']} {category['name']} ({instructions_count})",
                callback_data=f"category_{cat_id}"
            )
        
        kb.adjust(1)
        
        await message.answer(
            "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing dynamic categories: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("category_"))
async def instructions_dynamic_category(callback: types.CallbackQuery):
    """Handle dynamic category selection"""
    try:
        category_id = callback.data.replace("category_", "")
        manager = get_instruction_manager()
        category = manager.get_category(category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        instructions = manager.get_instructions(category_id)
        
        # Create dynamic keyboard for instructions
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        
        for inst_id, instruction in instructions.items():
            available_files = manager.get_available_files(category_id, inst_id)
            files_text = f"({len([f for f in available_files if f['exists']])} —Ñ–∞–π–ª–æ–≤)"
            kb.button(
                text=f"üìù {instruction['name']} {files_text}",
                callback_data=f"instruction_{category_id}_{inst_id}"
            )
        
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        kb.adjust(1)
        
        text = f"üìö <b>{category['icon']} {category['name']}</b>\n\n"
        text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {category['description']}\n\n"
        text += f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:"
        
        await callback.message.edit_text(
            text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling dynamic category: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("instruction_"))
async def instructions_dynamic_instruction(callback: types.CallbackQuery):
    """Handle dynamic instruction selection"""
    try:
        parts = callback.data.replace("instruction_", "").split("_", 1)
        category_id = parts[0]
        instruction_id = parts[1]
        
        manager = get_instruction_manager()
        instruction = manager.get_instruction(category_id, instruction_id)
        
        if not instruction:
            await callback.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        available_files = manager.get_available_files(category_id, instruction_id)
        existing_files = [f for f in available_files if f['exists']]
        
        if not existing_files:
            await callback.answer("‚ùå –§–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        # Create keyboard for file formats
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        
        for file_info in existing_files:
            kb.button(
                text=f"üìÑ {file_info['format'].upper()}",
                callback_data=f"secure_link:{category_id}_{instruction_id}:{file_info['format']}"
            )
        
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_id}")
        kb.adjust(1)
        
        text = f"üìù <b>{instruction['name']}</b>\n\n"
        text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {instruction['description']}\n\n"
        text += f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join([f['format'].upper() for f in existing_files])}\n\n"
        text += "üîí –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 40 –º–∏–Ω—É—Ç):"
        
        await callback.message.edit_text(
            text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling dynamic instruction: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "back_to_categories")
async def instructions_back_to_categories(callback: types.CallbackQuery):
    """Back to categories list"""
    try:
        manager = get_instruction_manager()
        categories = manager.get_categories()
        
        # Create dynamic keyboard
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        kb = InlineKeyboardBuilder()
        
        for cat_id, category in categories.items():
            instructions_count = len(category["instructions"])
            kb.button(
                text=f"{category['icon']} {category['name']} ({instructions_count})",
                callback_data=f"category_{cat_id}"
            )
        
        kb.adjust(1)
        
        await callback.message.edit_text(
            "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error going back to categories: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)

@router.message(InstructionsStates.choosing_1c_type, F.text.in_({"AR2", "DM"}))
async def instructions_1c_type(message: types.Message, state: FSMContext):
    """Handle 1C instruction type selection"""
    instruction_type = f"1c_{message.text.lower()}"
    await _send_instruction_files(message, instruction_type)


@router.message(InstructionsStates.choosing_email_type, F.text.in_({"üì± iPhone", "ü§ñ Android", "üíª Outlook"}))
async def instructions_email_type(message: types.Message, state: FSMContext):
    """Handle email instruction type selection"""
    text = message.text
    if text == "üì± iPhone":
        instruction_type = "email_iphone"
    elif text == "ü§ñ Android":
        instruction_type = "email_android"
    elif text == "üíª Outlook":
        instruction_type = "email_outlook"
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
        return
    
    await _send_instruction_files(message, instruction_type)


async def _send_instruction_files(message: types.Message, instruction_type: str):
    """Send instruction files via secure Mini App links"""
    # Get instruction info
    info = get_instruction_info(instruction_type)
    if not info["available"]:
        await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # Get available formats
    files = get_instruction_files(instruction_type)
    available_formats = [fmt for fmt, content in files.items() if content is not None]
    
    if not available_formats:
        await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # Format message based on instruction type
    type_names = {
        "1c_ar2": "1–° AR2",
        "1c_dm": "1–° DM", 
        "email_iphone": "iPhone",
        "email_android": "Android",
        "email_outlook": "Outlook"
    }
    
    type_name = type_names.get(instruction_type, instruction_type)
    formats_text = ", ".join([fmt.upper() for fmt in available_formats])
    
    # Create keyboard with format buttons
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    
    for fmt in available_formats:
        kb.button(
            text=f"üìÑ {fmt.upper()}", 
            callback_data=f"secure_link:{instruction_type}:{fmt}"
        )
    
    kb.adjust(1)  # One button per row
    
    message_text = (
        f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {type_name}\n\n"
        f"üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {formats_text}\n\n"
        f"üîí –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 40 –º–∏–Ω—É—Ç)"
    )
    
    await message.answer(message_text, reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("secure_link:"))
async def create_secure_link(callback: types.CallbackQuery):
    """Create secure link for instruction file"""
    try:
        # Parse callback data
        _, instruction_data, file_format = callback.data.split(":", 2)
        
        # Handle both old format (instruction_type) and new format (category_instruction)
        if "_" in instruction_data and not instruction_data.startswith("1c_") and not instruction_data.startswith("email_"):
            # New format: category_instruction
            parts = instruction_data.split("_", 1)
            category_id = parts[0]
            instruction_id = parts[1]
            instruction_type = f"{category_id}_{instruction_id}"
        else:
            # Old format: instruction_type
            instruction_type = instruction_data
        
        # Get user ID
        user_id = callback.from_user.id
        
        # Create secure link via API
        api_url = f"{MINIAPP_WEBHOOK_URL.rstrip('/')}/api/secure/create-link"
        
        response = requests.post(api_url, json={
            "instruction_type": instruction_type,
            "file_format": file_format,
            "user_id": user_id
        }, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            secure_url = data["secure_url"]
            expires_in = data["expires_in_minutes"]
            
            # Create Mini App button
            web_app_info = WebAppInfo(url=secure_url)
            
            # Format message
            type_names = {
                "1c_ar2": "1–° AR2",
                "1c_dm": "1–° DM", 
                "email_iphone": "iPhone",
                "email_android": "Android",
                "email_outlook": "Outlook"
            }
            
            type_name = type_names.get(instruction_type, instruction_type)
            
            message_text = (
                f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n"
                f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {type_name} ({file_format.upper()})\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {expires_in} –º–∏–Ω—É—Ç\n\n"
                f"‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
            )
            
            # Create keyboard with Mini App button
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            kb = InlineKeyboardBuilder()
            kb.button(text="üìö –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", web_app=web_app_info)
            
            await callback.message.edit_text(
                message_text, 
                reply_markup=kb.as_markup()
            )
            
        else:
            error_data = response.json() if response.content else {"error": "Unknown error"}
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {error_data.get('error', 'Unknown error')}", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error creating secure link: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Å—ã–ª–∫–∏", show_alert=True)
    
    await callback.answer()

@router.message(InstructionsStates.choosing_1c_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
@router.message(InstructionsStates.choosing_email_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def instructions_back_to_main(message: types.Message, state: FSMContext):
    """Back to instructions main menu"""
    await state.set_state(InstructionsStates.main_menu)
    await message.answer("üìö –†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", reply_markup=instructions_main_keyboard())


@router.message(InstructionsStates.main_menu, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def instructions_back_to_root(message: types.Message, state: FSMContext):
    """Back to main menu"""
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_after_auth_keyboard())


@router.message(InstructionsStates.awaiting_otp_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
@router.message(InstructionsStates.awaiting_otp_code, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def instructions_cancel_otp(message: types.Message, state: FSMContext):
    """Cancel OTP verification"""
    user_id = str(message.from_user.id)
    if user_id in _otp_codes:
        del _otp_codes[user_id]
    
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_after_auth_keyboard())