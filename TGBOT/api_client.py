import requests
import logging
from config import INTRASERVICE_BASE_URL, ENCODED_CREDENTIALS, API_VERSION

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∞)
requests.packages.urllib3.disable_warnings()

logger = logging.getLogger(__name__)


# --- 1. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û –¢–ï–õ–ï–§–û–ù–£ ---
def get_user_by_phone(phone: str):
    """
    –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: +7..., 8..., 7...
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    digits = ''.join(filter(str.isdigit, phone))
    if not digits:
        return None

    search_query = None
    if digits.startswith('8') and len(digits) == 11:
        search_query = digits[1:]  # 89506459087 ‚Üí 9506459087
    elif digits.startswith('7') and len(digits) == 11:
        search_query = digits[1:]  # 79506459087 ‚Üí 9506459087
    elif len(digits) == 10:
        search_query = digits  # 9506459087

    if not search_query:
        return None

    url = f"{INTRASERVICE_BASE_URL}/user"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {"search": search_query}

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {params} ‚Üí —Å—Ç–∞—Ç—É—Å {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            users = data.get("Users", [])
            for user in users:
                mp = user.get("MobilePhone", "")
                if not mp:
                    continue
                mp_digits = ''.join(filter(str.isdigit, mp))
                if mp_digits.startswith('8') and len(mp_digits) == 11:
                    mp_digits = '7' + mp_digits[1:]
                if mp_digits == '7' + search_query:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['Name']} (ID={user['Id']})")
                    return user
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return None


# --- 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def get_user_tasks(user_id: int, status_filter: str = "open"):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    status_filter: "open" –∏–ª–∏ "closed"
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    # ID —Å—Ç–∞—Ç—É—Å–æ–≤
    open_ids = "27,31,35,44"   # –ù–æ–≤–∞—è, –û—Ç–∫—Ä—ã—Ç–∞, –í —Ä–∞–±–æ—Ç–µ, –û–∂–∏–¥–∞–µ—Ç
    closed_ids = "28,29,30"     # –ó–∞–≤–µ—Ä—à–µ–Ω–∞, –í—ã–ø–æ–ª–Ω–µ–Ω–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞

    params = {
        "creatorids": user_id,
        "statusids": open_ids if status_filter == "open" else closed_ids,
        "count": "false"
    }

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        logger.info(f"üì° GET /task | URL: {response.url}")

        if response.status_code == 200:
            return response.json().get("Tasks", [])
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} {response.text}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []


# --- 3. –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï ---
def get_tasks_awaiting_approval(user_intraservice_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–≥–ª–∞—Å—É—é—â–∏–π –∏ –µ—â—ë –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç CoordinatorIds –∏ IsCoordinatedForCoordinators.
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {
        "coordinatorids": user_intraservice_id,
        "statusids": "36",  # –°—Ç–∞—Ç—É—Å "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"
        "count": "false"
    }

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {response.status_code}")
            return []

        tasks = response.json().get("Tasks", [])
        result = []

        for task in tasks:
            coordinator_ids_str = task.get("CoordinatorIds", "")
            is_coordinated_str = task.get("IsCoordinatedForCoordinators", "")

            coordinator_ids = [cid.strip() for cid in coordinator_ids_str.split(",") if cid.strip()]
            is_coordinated = [ic.strip().lower() for ic in is_coordinated_str.split(",") if ic.strip()]

            user_id_str = str(user_intraservice_id)

            if user_id_str not in coordinator_ids:
                continue  # –ù–µ –≤—ã

            idx = coordinator_ids.index(user_id_str)
            if idx < len(is_coordinated) and is_coordinated[idx] == "true":
                continue  # –£–∂–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª–∏

            result.append(task)

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")
        return []


# --- 4. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –ó–ê–Ø–í–ö–ò ---
def get_task_details(task_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
    """
    url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {"include": "COMMENTS"}

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{task_id}: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


# --- 5. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø ---
def add_comment_to_task(task_id: int, comment: str):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ.
    """
    url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    payload = {"Comment": comment}

    try:
        response = requests.put(url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{task_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.status_code} {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


# --- 6. –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï / –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ---
def approve_task(task_id: int, approve: bool = True, comment: str = "", user_name: str = None):
    """
    –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.
    """
    url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    full_comment = comment or ""
    if user_name:
        action = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ" if approve else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        full_comment = f"{action} —á–µ—Ä–µ–∑ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name}. {full_comment}".strip()

    payload = {"Coordinate": approve}
    if full_comment:
        payload["Comment"] = full_comment

    try:
        response = requests.put(url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{task_id} {'—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞' if approve else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è: {response.status_code} {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


# --- 7. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ó–ê–Ø–í–ö–ò ---
def create_task(**payload):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.
    –ü—Ä–∏–º–µ—Ä payload:
    {
        "Name": "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
        "Description": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "CreatorId": 53,
        "ServiceId": 1,
        "StatusId": 27
    }
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    try:
        response = requests.post(url, headers=headers, json=payload, verify=False)
        if response.status_code == 201:
            task_id = response.json().get("Id")
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: #{task_id}")
            return task_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None