import requests
import logging
from config import INTRASERVICE_BASE_URL, ENCODED_CREDENTIALS, API_VERSION

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∞)
requests.packages.urllib3.disable_warnings()

logger = logging.getLogger(__name__)


# --- 1. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û –¢–ï–õ–ï–§–û–ù–£ ---
def get_user_by_phone(phone: str):
    """
    –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: +7..., 8..., 7...
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    digits = ''.join(filter(str.isdigit, phone))
    if not digits:
        return None

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_query = digits[-10:] if len(digits) >= 10 else None

    if not search_query:
        return None

    url = f"{INTRASERVICE_BASE_URL}/user"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {"search": search_query}

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {params} ‚Üí —Å—Ç–∞—Ç—É—Å {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            users = data.get("Users", [])
            for user in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø–æ–ª—è
                phones = []
                for k in ("MobilePhone", "Mobile", "Phone", "Phones", "WorkPhone", "InternalPhone"):
                    v = user.get(k)
                    if isinstance(v, str) and v:
                        phones.append(v)
                match = False
                for p in phones:
                    d = ''.join(filter(str.isdigit, p))
                    if not d:
                        continue
                    last10 = d[-10:] if len(d) >= 10 else d
                    if last10 == search_query or ('7'+last10) == d or ('8'+last10) == d:
                        match = True
                        break
                if match:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('Name')} (ID={user.get('Id')})")
                    return user
            # –ï—Å–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä ‚Äî –≤–µ—Ä–Ω—ë–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–∫ —Ñ–æ–ª–±–µ–∫
            if len(users) == 1:
                u = users[0]
                logger.info(f"‚ÑπÔ∏è –§–æ–ª–±–µ–∫: –≤–æ–∑–≤—Ä–∞—â–∞—é –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u.get('Name')} (ID={u.get('Id')})")
                return u
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return None


# --- 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
def get_user_tasks(user_id: int, status_filter: str = "open"):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    status_filter: "open" –∏–ª–∏ "closed"
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    # ID —Å—Ç–∞—Ç—É—Å–æ–≤
    open_ids = "27,31,35,44"   # –ù–æ–≤–∞—è, –û—Ç–∫—Ä—ã—Ç–∞, –í —Ä–∞–±–æ—Ç–µ, –û–∂–∏–¥–∞–µ—Ç
    closed_ids = "28,29,30,45"     # –ó–∞–≤–µ—Ä—à–µ–Ω–∞, –í—ã–ø–æ–ª–Ω–µ–Ω–∞, –û—Ç–∫–ª–æ–Ω–µ–Ω–∞, –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ

    base_params = {
        "statusids": open_ids if status_filter == "open" else closed_ids,
        "count": "false"
    }

    try:
        # 1) –ü–æ–∏—Å–∫ –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        params1 = dict(base_params, creatorids=user_id)
        response = requests.get(url, headers=headers, params=params1, verify=False)
        logger.info(f"üì° GET /task | URL: {response.url}")

        if response.status_code == 200:
            tasks = response.json().get("Tasks", [])
            if tasks:
                return tasks
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} {response.text}")

        # 2) –§–æ–ª–±–µ–∫ –ø–æ —É—á–∞—Å—Ç–∏—é (memberids)
        params2 = dict(base_params, memberids=user_id)
        response = requests.get(url, headers=headers, params=params2, verify=False)
        logger.info(f"üì° GET /task (memberids) | URL: {response.url}")
        if response.status_code == 200:
            return response.json().get("Tasks", [])
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} {response.text}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []


# --- 3. –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï ---
def get_tasks_awaiting_approval(user_intraservice_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–≥–ª–∞—Å—É—é—â–∏–π –∏ –µ—â—ë –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç CoordinatorIds –∏ IsCoordinatedForCoordinators.
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {
        "coordinatorids": user_intraservice_id,
        "statusids": "36",  # –°—Ç–∞—Ç—É—Å "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ"
        "count": "false"
    }

    try:
        response = requests.get(url, headers=headers, params=params, verify=False)
        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {response.status_code}")
            return []

        tasks = response.json().get("Tasks", [])
        result = []

        for task in tasks:
            coordinator_ids_str = task.get("CoordinatorIds", "")
            is_coordinated_str = task.get("IsCoordinatedForCoordinators", "")

            coordinator_ids = [cid.strip() for cid in coordinator_ids_str.split(",") if cid.strip()]
            is_coordinated = [ic.strip().lower() for ic in is_coordinated_str.split(",") if ic.strip()]

            user_id_str = str(user_intraservice_id)

            if user_id_str not in coordinator_ids:
                continue  # –ù–µ –≤—ã

            idx = coordinator_ids.index(user_id_str)
            if idx < len(is_coordinated) and is_coordinated[idx] == "true":
                continue  # –£–∂–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª–∏

            result.append(task)

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: {e}")
        return []


# --- 4. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –ó–ê–Ø–í–ö–ò ---
def get_task_details(task_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–Ω—ã–º–∏ include-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    """
    base_url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    include_variants = [
        "COMMENTS",
        "TASKCOMMENTS",
        "COMMENTSALL",
    ]

    for inc in include_variants:
        try:
            params = {"include": inc}
            response = requests.get(base_url, headers=headers, params=params, verify=False)
            if response.status_code == 200:
                data = response.json()
                # –ï—Å–ª–∏ –≤–∏–¥–∏–º –ø–æ–ª–µ Comments –≤ –ª—é–±–æ–º –≤–∏–¥–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                if any(k in data for k in ("Comments", "TaskComments", "CommentsList")):
                    return data
                # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è —Å—Ç–∞—Ç—É—Å–∞/–æ–ø–∏—Å–∞–Ω–∏—è)
                if inc == include_variants[-1]:
                    return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{task_id} (include={inc}): {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    return None


def get_task_comments(task_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ include –Ω–µ –æ—Ç–¥–∞—ë—Ç.
    –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É—Ç–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[dict] –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    paths = [
        f"{INTRASERVICE_BASE_URL}/task/{task_id}/comment",
        f"{INTRASERVICE_BASE_URL}/task/{task_id}/comments",
    ]
    for url in paths:
        try:
            r = requests.get(url, headers=headers, verify=False)
            if r.status_code == 200:
                data = r.json()
                if isinstance(data, list):
                    return data
                if isinstance(data, dict):
                    for key in ("Comments", "Items", "TaskComments", "List"):
                        val = data.get(key)
                        if isinstance(val, list):
                            return val
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è #%s", task_id)
    return []


def get_task_lifetime_comments(task_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ª–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏ –∑–∞—è–≤–∫–∏ (/tasklifetime).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[dict] —Å –ø–æ–ª—è–º–∏ Id, Comments, Author/AuthorName/AuthorIsOperator –∏ –ø—Ä.
    """
    base = f"{INTRASERVICE_BASE_URL}/tasklifetime"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {"taskid": task_id, "lastcommentsontop": "true"}
    try_versions = [headers.copy()]

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –æ—Ç–¥–∞—ë—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-API-Version –∏–ª–∏ —Å 1.0
    alt_headers = headers.copy(); alt_headers.pop("X-API-Version", None)
    try_versions.append(alt_headers)
    v1_headers = headers.copy(); v1_headers["X-API-Version"] = "1.0"
    try_versions.append(v1_headers)

    for h in try_versions:
        try:
            r = requests.get(base, headers=h, params=params, verify=False)
            if r.status_code == 200:
                data = r.json()
                items = data.get("TaskLifetimes", [])
                if isinstance(items, list):
                    return items
            else:
                logger.warning(f"‚ö†Ô∏è tasklifetime {r.status_code}: {r.text[:200]}")
        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ tasklifetime –¥–ª—è #%s: %s", task_id, e)
    return []


# --- 5. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø ---
def add_comment_to_task(task_id: int, comment: str, public: bool = True):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ.
    public=True ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–∫–ª—é—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–ª–∞–≥–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ API)
    """
    url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    payload = {"Comment": comment}

    if public:
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ª–∏—à–Ω–∏–µ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã)
        payload.update({
            "IsPublic": True,
            "IsClientVisible": True,
            "ForClient": True,
            "Internal": False,
            "IsHidden": False,
        })

    try:
        response = requests.put(url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{task_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.status_code} {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


# --- 6. –°–û–ì–õ–ê–°–û–í–ê–ù–ò–ï / –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ---
def approve_task(task_id: int, approve: bool = True, comment: str = "", user_name: str = None, coordinator_id: int = None, set_status_on_success: int | None = None):
    """
    –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.
    coordinator_id ‚Äî Id —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ –≤ IntraService (–¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ)
    set_status_on_success ‚Äî –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π StatusId (–Ω–∞–ø—Ä–∏–º–µ—Ä 45)
    """
    url = f"{INTRASERVICE_BASE_URL}/task/{task_id}"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    full_comment = comment or ""
    if user_name:
        action = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ" if approve else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        full_comment = f"{action} —á–µ—Ä–µ–∑ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name}. {full_comment}".strip()

    payload = {"Coordinate": approve}

    # –ü—Ä–æ–±—É–µ–º —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    if coordinator_id is not None:
        payload["CoordinatorId"] = coordinator_id
        payload["CoordinateForCoordinatorId"] = coordinator_id

    if full_comment:
        payload["Comment"] = full_comment

    try:
        response = requests.put(url, headers=headers, json=payload, verify=False)
        if response.status_code == 200:
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{task_id} {'—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞' if approve else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å —è–≤–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è –ø–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å)
            if set_status_on_success is not None and approve:
                try:
                    force_payload = {"StatusId": set_status_on_success}
                    r2 = requests.put(url, headers=headers, json=force_payload, verify=False)
                    if r2.status_code != 200:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å {set_status_on_success} –¥–ª—è #{task_id}: {r2.status_code} {r2.text}")
                except Exception as ie:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {ie}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è: {response.status_code} {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


# --- 7. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ó–ê–Ø–í–ö–ò ---
def create_task(**payload):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.
    –ü—Ä–∏–º–µ—Ä payload:
    {
        "Name": "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
        "Description": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "CreatorId": 53,
        "ServiceId": 1,
        "StatusId": 27
    }
    """
    url = f"{INTRASERVICE_BASE_URL}/task"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }

    try:
        # –£–¥–∞–ª–∏–º None, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å null –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è non-null –ø–æ–ª–µ–π
        clean_payload = {k: v for k, v in payload.items() if v is not None}
        response = requests.post(url, headers=headers, json=clean_payload, verify=False)
        if response.status_code == 201:
            task_id = response.json().get("Id")
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: #{task_id}")
            return task_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def search_users_by_name(query: str):
    """
    –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
    """
    url = f"{INTRASERVICE_BASE_URL}/user"
    headers = {
        "Authorization": f"Basic {ENCODED_CREDENTIALS}",
        "Accept": "application/json",
        "X-API-Version": API_VERSION,
    }
    params = {"search": query}
    try:
        r = requests.get(url, headers=headers, params=params, verify=False)
        if r.status_code == 200:
            return r.json().get("Users", [])
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {r.status_code} {r.text}")
            return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return []