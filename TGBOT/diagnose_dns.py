#!/usr/bin/env python3
"""
DNS Diagnostic Script
Tests DNS resolution and connectivity
"""
import socket
import requests
import subprocess
import sys
import time
from urllib.parse import urlparse

def test_dns_resolution(hostname):
    """Test DNS resolution for hostname"""
    print(f"üîç Testing DNS resolution for {hostname}")
    print("=" * 50)
    
    try:
        # Test IPv4 resolution
        ipv4 = socket.gethostbyname(hostname)
        print(f"‚úÖ IPv4: {ipv4}")
    except socket.gaierror as e:
        print(f"‚ùå IPv4 resolution failed: {e}")
        return False
    
    try:
        # Test IPv6 resolution
        ipv6 = socket.getaddrinfo(hostname, None, socket.AF_INET6)
        print(f"‚úÖ IPv6: {ipv6[0][4][0]}")
    except socket.gaierror:
        print("‚ö†Ô∏è  IPv6 resolution not available")
    
    return True

def test_connectivity(hostname, port):
    """Test connectivity to hostname:port"""
    print(f"\nüîå Testing connectivity to {hostname}:{port}")
    print("=" * 50)
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((hostname, port))
        sock.close()
        
        if result == 0:
            print(f"‚úÖ Connection successful to {hostname}:{port}")
            return True
        else:
            print(f"‚ùå Connection failed to {hostname}:{port} (error: {result})")
            return False
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_http_requests(hostname, port):
    """Test HTTP requests to hostname:port"""
    print(f"\nüåê Testing HTTP requests to {hostname}:{port}")
    print("=" * 50)
    
    test_urls = [
        f"http://{hostname}:{port}",
        f"https://{hostname}:{port}",
        f"http://{hostname}:{port}/api/secure/create-link",
        f"https://{hostname}:{port}/api/secure/create-link"
    ]
    
    for url in test_urls:
        try:
            print(f"Testing: {url}")
            response = requests.get(url, timeout=5, verify=False)
            print(f"‚úÖ Status: {response.status_code}")
        except requests.exceptions.ConnectionError as e:
            print(f"‚ùå Connection Error: {e}")
        except requests.exceptions.SSLError as e:
            print(f"‚ö†Ô∏è  SSL Error: {e}")
        except requests.exceptions.Timeout as e:
            print(f"‚è∞ Timeout: {e}")
        except Exception as e:
            print(f"‚ùå Error: {e}")

def test_dns_servers():
    """Test DNS servers"""
    print(f"\nüîß Testing DNS servers")
    print("=" * 50)
    
    # Test with different DNS servers
    dns_servers = [
        "8.8.8.8",      # Google DNS
        "1.1.1.1",      # Cloudflare DNS
        "208.67.222.222" # OpenDNS
    ]
    
    hostname = "bot.bunter.ru"
    
    for dns_server in dns_servers:
        try:
            print(f"Testing with DNS server: {dns_server}")
            # Use nslookup if available
            result = subprocess.run(
                ["nslookup", hostname, dns_server], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if result.returncode == 0:
                print(f"‚úÖ {dns_server}: {hostname} resolved")
                # Extract IP from output
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'Address:' in line and hostname not in line:
                        print(f"   IP: {line.split('Address:')[1].strip()}")
            else:
                print(f"‚ùå {dns_server}: Resolution failed")
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {dns_server}: Timeout")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  nslookup not available, skipping {dns_server}")
        except Exception as e:
            print(f"‚ùå {dns_server}: Error - {e}")

def suggest_solutions(hostname, port):
    """Suggest solutions based on test results"""
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {hostname}:{port}")
    print("=" * 50)
    
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–º–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ A-–∑–∞–ø–∏—Å–∏ –≤ DNS")
    print("   - –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS (–¥–æ 24 —á–∞—Å–æ–≤)")
    
    print("\n2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–º–µ—Å—Ç–æ –¥–æ–º–µ–Ω–∞")
    print("   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π hosts —Ñ–∞–π–ª")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω")
    
    print("\n3. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ Mini App –ª–æ–∫–∞–ª—å–Ω–æ")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ localhost –≤–º–µ—Å—Ç–æ –¥–æ–º–µ–Ω–∞")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞")

def test_localhost_alternative():
    """Test localhost alternative"""
    print(f"\nüè† Testing localhost alternative")
    print("=" * 50)
    
    localhost_urls = [
        "http://localhost:4477",
        "http://127.0.0.1:4477",
        "https://localhost:4477",
        "https://127.0.0.1:4477"
    ]
    
    for url in localhost_urls:
        try:
            print(f"Testing: {url}")
            response = requests.get(url, timeout=5, verify=False)
            print(f"‚úÖ Status: {response.status_code}")
        except requests.exceptions.ConnectionError as e:
            print(f"‚ùå Connection Error: {e}")
        except requests.exceptions.SSLError as e:
            print(f"‚ö†Ô∏è  SSL Error: {e}")
        except Exception as e:
            print(f"‚ùå Error: {e}")

def main():
    hostname = "bot.bunter.ru"
    port = 4477
    
    print("üîç DNS –∏ Connectivity Diagnostic Tool")
    print("=" * 50)
    
    # Test DNS resolution
    dns_ok = test_dns_resolution(hostname)
    
    if dns_ok:
        # Test connectivity
        conn_ok = test_connectivity(hostname, port)
        
        if conn_ok:
            # Test HTTP requests
            test_http_requests(hostname, port)
        else:
            print(f"\n‚ùå Cannot connect to {hostname}:{port}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç")
    else:
        print(f"\n‚ùå Cannot resolve {hostname}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # Test DNS servers
    test_dns_servers()
    
    # Test localhost alternative
    test_localhost_alternative()
    
    # Suggest solutions
    suggest_solutions(hostname, port)
    
    print(f"\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()