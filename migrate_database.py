#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from sqlalchemy import text

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with app.app_context():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ surveys
            result = db.session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='survey'"))
            if not result.fetchone():
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'survey' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞.")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Survey
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Survey...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ require_name
            try:
                db.session.execute(text("SELECT require_name FROM survey LIMIT 1"))
                print("‚úÖ –ü–æ–ª–µ 'require_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except:
                print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'require_name'")
                db.session.execute(text("ALTER TABLE survey ADD COLUMN require_name BOOLEAN DEFAULT 0"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Question
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Question...")
            
            new_question_fields = [
                ("is_required", "BOOLEAN DEFAULT 1"),
                ("allow_other", "BOOLEAN DEFAULT 0"),
                ("other_text", "VARCHAR(200)"),
                ("rating_min", "INTEGER DEFAULT 1"),
                ("rating_max", "INTEGER DEFAULT 10"),
                ("rating_labels", "TEXT"),
                ("grid_rows", "TEXT"),
                ("grid_columns", "TEXT"),
                ("question_order", "INTEGER DEFAULT 0")
            ]
            
            for field_name, field_type in new_question_fields:
                try:
                    db.session.execute(text(f"SELECT {field_name} FROM question LIMIT 1"))
                    print(f"‚úÖ –ü–æ–ª–µ '{field_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ '{field_name}'")
                    db.session.execute(text(f"ALTER TABLE question ADD COLUMN {field_name} {field_type}"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è type –≤ —Ç–∞–±–ª–∏—Ü–µ Question
            print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è 'type' –≤ —Ç–∞–±–ª–∏—Ü–µ Question...")
            try:
                # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                print("‚ÑπÔ∏è  –ü–æ–ª–µ 'type' —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ 'type': {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É SurveyResponse
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É SurveyResponse...")
            
            new_response_fields = [
                ("respondent_name", "VARCHAR(200)"),
                ("user_agent", "TEXT"),
                ("completion_time", "INTEGER")
            ]
            
            for field_name, field_type in new_response_fields:
                try:
                    db.session.execute(text(f"SELECT {field_name} FROM survey_response LIMIT 1"))
                    print(f"‚úÖ –ü–æ–ª–µ '{field_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ '{field_name}'")
                    db.session.execute(text(f"ALTER TABLE survey_response ADD COLUMN {field_name} {field_type}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_other –≤ —Ç–∞–±–ª–∏—Ü—É Answer
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'is_other' –≤ —Ç–∞–±–ª–∏—Ü—É Answer...")
            try:
                db.session.execute(text("SELECT is_other FROM answer LIMIT 1"))
                print("‚úÖ –ü–æ–ª–µ 'is_other' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except:
                print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ 'is_other'")
                db.session.execute(text("ALTER TABLE answer ADD COLUMN is_other BOOLEAN DEFAULT 0"))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            print("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            
            # –¢–∞–±–ª–∏—Ü–∞ AnalyticsCache
            try:
                db.session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='analytics_cache'"))
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'analytics_cache' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except:
                print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'analytics_cache'")
                db.session.execute(text("""
                    CREATE TABLE analytics_cache (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        cache_key VARCHAR(200) UNIQUE NOT NULL,
                        data TEXT NOT NULL,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        expires_at DATETIME NOT NULL
                    )
                """))
            
            # –¢–∞–±–ª–∏—Ü–∞ SurveyAnalytics
            try:
                db.session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='survey_analytics'"))
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'survey_analytics' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except:
                print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'survey_analytics'")
                db.session.execute(text("""
                    CREATE TABLE survey_analytics (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        survey_id INTEGER NOT NULL,
                        metric_name VARCHAR(100) NOT NULL,
                        metric_value FLOAT NOT NULL,
                        calculated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (survey_id) REFERENCES survey (id)
                    )
                """))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–æ—Å–æ–≤
            result = db.session.execute(text("SELECT COUNT(*) FROM survey"))
            survey_count = result.fetchone()[0]
            print(f"   –û–ø—Ä–æ—Å–æ–≤: {survey_count}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            result = db.session.execute(text("SELECT COUNT(*) FROM question"))
            question_count = result.fetchone()[0]
            print(f"   –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
            result = db.session.execute(text("SELECT COUNT(*) FROM survey_response"))
            response_count = result.fetchone()[0]
            print(f"   –û—Ç–≤–µ—Ç–æ–≤: {response_count}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = db.session.execute(text("SELECT COUNT(*) FROM user"))
            user_count = result.fetchone()[0]
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            db.session.rollback()
            return False

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüéØ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with app.app_context():
        try:
            from app import User, Survey, Question
            from werkzeug.security import generate_password_hash
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            existing_surveys = Survey.query.filter(Survey.title.like('%–¢–µ—Å—Ç%')).count()
            if existing_surveys > 0:
                print("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User.query.filter_by(username='test_creator').first()
            if not test_user:
                test_user = User(
                    username='test_creator',
                    email='test@buntergroup.com',
                    password_hash=generate_password_hash('test123'),
                    can_create_surveys=True
                )
                db.session.add(test_user)
                db.session.commit()
                print("‚ûï –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            test_survey = Survey(
                title='–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤',
                description='–û–ø—Ä–æ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
                require_name=True,
                creator_id=test_user.id
            )
            db.session.add(test_survey)
            db.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            questions_data = [
                {
                    'text': '–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?',
                    'type': 'multiple_choice',
                    'options': '["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–ñ–µ–ª—Ç—ã–π"]',
                    'allow_other': True,
                    'other_text': '–î—Ä—É–≥–æ–π —Ü–≤–µ—Ç'
                },
                {
                    'text': '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ (1-5)',
                    'type': 'rating',
                    'rating_min': 1,
                    'rating_max': 5,
                    'rating_labels': '["–ü–ª–æ—Ö–æ", "–û—Ç–ª–∏—á–Ω–æ"]'
                },
                {
                    'text': '–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)',
                    'type': 'checkbox',
                    'options': '["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–≠–∫—Å–ø–æ—Ä—Ç", "–î–∏–∑–∞–π–Ω", "–ü—Ä–æ—Å—Ç–æ—Ç–∞"]',
                    'allow_other': True
                },
                {
                    'text': '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤',
                    'type': 'text',
                    'is_required': False
                }
            ]
            
            for i, q_data in enumerate(questions_data):
                question = Question(
                    text=q_data['text'],
                    type=q_data['type'],
                    options=q_data.get('options'),
                    is_required=q_data.get('is_required', True),
                    allow_other=q_data.get('allow_other', False),
                    other_text=q_data.get('other_text'),
                    rating_min=q_data.get('rating_min', 1),
                    rating_max=q_data.get('rating_max', 10),
                    rating_labels=q_data.get('rating_labels'),
                    question_order=i,
                    survey_id=test_survey.id
                )
                db.session.add(question)
            
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()

if __name__ == '__main__':
    print("üöÄ BG Survey Platform - –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if migrate_database():
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_sample_data()
        
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
        print("   ‚úÖ –ù–æ–≤—ã–π —Ç–∏–ø –æ–ø—Ä–æ—Å–∞: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–º—è'")
        print("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ (–∫–∞–∫ –≤ Google Forms)")
        print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–º–∏–Ω/–º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∏)")
        print("   ‚úÖ –°–µ—Ç–∫–∞ —Ñ–ª–∞–∂–∫–æ–≤")
        print("   ‚úÖ –û–ø—Ü–∏—è '–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("   ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ/–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        print("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ Excel –æ—Ç—á–µ—Ç—ã")
        print("   ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
        print("   ‚úÖ User Agent –±—Ä–∞—É–∑–µ—Ä–∞")
        
        print("\nüîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("   2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)