#!/bin/bash

# üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Solana DEX Trading Bot

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    local status=$1
    local message=$2
    
    if [ "$status" = "OK" ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    elif [ "$status" = "WARN" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
    else
        echo -e "${RED}‚ùå $message${NC}"
    fi
}

echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Solana DEX Trading Bot${NC}"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo -e "\n${BLUE}üìä –ü—Ä–æ—Ü–µ—Å—Å—ã:${NC}"

# FastAPI
if pgrep -f "python run.py" > /dev/null; then
    print_status "OK" "FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
else
    print_status "ERROR" "FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"
fi

# Celery Worker
if pgrep -f "python run_worker.py" > /dev/null; then
    print_status "OK" "Celery Worker –∑–∞–ø—É—â–µ–Ω"
else
    print_status "ERROR" "Celery Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# Sniper Bot
if pgrep -f "python run_sniper.py" > /dev/null; then
    print_status "OK" "Sniper Bot –∑–∞–ø—É—â–µ–Ω"
else
    print_status "ERROR" "Sniper Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "\n${BLUE}üåê –ü–æ—Ä—Ç—ã:${NC}"

# FastAPI (8000)
if netstat -tuln 2>/dev/null | grep -q ":8000 "; then
    print_status "OK" "–ü–æ—Ä—Ç 8000 (FastAPI) –æ—Ç–∫—Ä—ã—Ç"
else
    print_status "ERROR" "–ü–æ—Ä—Ç 8000 (FastAPI) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
fi

# PostgreSQL (5432)
if netstat -tuln 2>/dev/null | grep -q ":5432 "; then
    print_status "OK" "–ü–æ—Ä—Ç 5432 (PostgreSQL) –æ—Ç–∫—Ä—ã—Ç"
else
    print_status "ERROR" "–ü–æ—Ä—Ç 5432 (PostgreSQL) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
fi

# Redis (6379)
if netstat -tuln 2>/dev/null | grep -q ":6379 "; then
    print_status "OK" "–ü–æ—Ä—Ç 6379 (Redis) –æ—Ç–∫—Ä—ã—Ç"
else
    print_status "ERROR" "–ü–æ—Ä—Ç 6379 (Redis) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
echo -e "\n${BLUE}üîå API:${NC}"

# Health check
if command -v curl > /dev/null; then
    if curl -s http://localhost:8000/api/health > /dev/null 2>&1; then
        print_status "OK" "API Health Check –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_status "ERROR" "API Health Check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Metrics
    if curl -s http://localhost:8000/api/metrics > /dev/null 2>&1; then
        print_status "OK" "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        print_status "ERROR" "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
else
    print_status "WARN" "curl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "\n${BLUE}üñ•Ô∏è  –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"

# PostgreSQL
if command -v systemctl > /dev/null; then
    if systemctl is-active --quiet postgresql; then
        print_status "OK" "PostgreSQL –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_status "ERROR" "PostgreSQL –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
else
    print_status "WARN" "systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤"
fi

# Redis
if command -v systemctl > /dev/null; then
    if systemctl is-active --quiet redis-server; then
        print_status "OK" "Redis –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_status "ERROR" "Redis –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
echo -e "\n${BLUE}üìÅ –§–∞–π–ª—ã:${NC}"

# .env
if [ -f ".env" ]; then
    print_status "OK" "–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    print_status "ERROR" "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# –õ–æ–≥–∏
if [ -d "logs" ]; then
    print_status "OK" "–ü–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    if [ -f "logs/app.log" ]; then
        print_status "OK" "–õ–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    if [ -f "logs/worker.log" ]; then
        print_status "OK" "–õ–æ–≥ worker —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    if [ -f "logs/sniper.log" ]; then
        print_status "OK" "–õ–æ–≥ sniper —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
else
    print_status "ERROR" "–ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "\n${BLUE}üêç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ:${NC}"

if [ -d "venv" ]; then
    print_status "OK" "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if [ -n "$VIRTUAL_ENV" ]; then
        print_status "OK" "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    else
        print_status "WARN" "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    fi
else
    print_status "ERROR" "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ -f "requirements.txt" ]; then
    if [ -n "$VIRTUAL_ENV" ]; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        if python -c "import fastapi" 2>/dev/null; then
            print_status "OK" "FastAPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_status "ERROR" "FastAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        
        if python -c "import sqlalchemy" 2>/dev/null; then
            print_status "OK" "SQLAlchemy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_status "ERROR" "SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        
        if python -c "import celery" 2>/dev/null; then
            print_status "OK" "Celery —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_status "ERROR" "Celery –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    else
        print_status "WARN" "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo -e "\n${BLUE}üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:${NC}"

# –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
total_checks=0
ok_checks=0
warn_checks=0
error_checks=0

# –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã—à–µ
if pgrep -f "python run.py" > /dev/null; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))
if pgrep -f "python run_worker.py" > /dev/null; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))
if pgrep -f "python run_sniper.py" > /dev/null; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))
if netstat -tuln 2>/dev/null | grep -q ":8000 "; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))
if [ -f ".env" ]; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))
if [ -d "logs" ]; then ((ok_checks++)); else ((error_checks++)); fi
((total_checks++))

# –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
if [ $total_checks -gt 0 ]; then
    health_percent=$((ok_checks * 100 / total_checks))
    
    if [ $health_percent -ge 80 ]; then
        echo -e "${GREEN}üéâ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $health_percent% ($ok_checks/$total_checks)${NC}"
    elif [ $health_percent -ge 60 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $health_percent% ($ok_checks/$total_checks)${NC}"
    else
        echo -e "${RED}üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $health_percent% ($ok_checks/$total_checks)${NC}"
    fi
fi

echo -e "\n${BLUE}üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
if [ $error_checks -gt 0 ]; then
    echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/"
    echo "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"
    echo "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./install.sh –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏"
else
    echo "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ UI"
    echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ http://localhost:8000/api/metrics"
fi

echo -e "\n${BLUE}üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
echo "‚Ä¢ QUICKSTART.md - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"
echo "‚Ä¢ INSTALL.md - –ü–æ–¥—Ä–æ–±–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "‚Ä¢ README.md - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"