#!/bin/bash

# üöÄ Solana DEX Trading Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                Solana DEX Trading Bot                        ‚ïë"
    echo "‚ïë                    –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ v1.0.0                         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        print_success "–û–°: Linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        print_success "–û–°: macOS"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
        print_success "–û–°: Windows"
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OSTYPE"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f2)
        
        if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 9 ]; then
            print_success "Python: $PYTHON_VERSION"
        else
            print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+, –Ω–∞–π–¥–µ–Ω: $PYTHON_VERSION"
            exit 1
        fi
    else
        print_error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if command -v pip3 &> /dev/null; then
        print_success "pip3 –Ω–∞–π–¥–µ–Ω"
    else
        print_error "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
        DOCKER_AVAILABLE=true
        print_success "Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã"
    else
        DOCKER_AVAILABLE=false
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    check_ports
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    
    local ports=(8000 5432 6379 9090 3000)
    local ports_in_use=()
    
    for port in "${ports[@]}"; do
        if command -v netstat &> /dev/null; then
            if netstat -tuln 2>/dev/null | grep -q ":$port "; then
                ports_in_use+=($port)
            fi
        elif command -v ss &> /dev/null; then
            if ss -tuln 2>/dev/null | grep -q ":$port "; then
                ports_in_use+=($port)
            fi
        fi
    done
    
    if [ ${#ports_in_use[@]} -eq 0 ]; then
        print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
    else
        print_warning "–ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: ${ports_in_use[*]}"
        print_warning "–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_system_deps() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ "$OS" = "linux" ]; then
        if command -v apt-get &> /dev/null; then
            # Ubuntu/Debian
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
            sudo apt-get update
            
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL, Redis –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            sudo apt-get install -y postgresql postgresql-contrib redis-server \
                build-essential python3-dev libpq-dev python3-venv curl
                
        elif command -v yum &> /dev/null; then
            # CentOS/RHEL
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL, Redis –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            sudo yum install -y postgresql postgresql-server redis \
                gcc python3-devel postgresql-devel python3-pip
                
        elif command -v dnf &> /dev/null; then
            # Fedora
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL, Redis –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            sudo dnf install -y postgresql postgresql-server redis \
                gcc python3-devel postgresql-devel python3-pip
        fi
        
    elif [ "$OS" = "macos" ]; then
        if command -v brew &> /dev/null; then
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –∏ Redis —á–µ—Ä–µ–∑ Homebrew..."
            brew install postgresql redis
        else
            print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL –∏ Redis –≤—Ä—É—á–Ω—É—é"
        fi
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
setup_postgresql() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
    
    if [ "$OS" = "linux" ]; then
        # –ó–∞–ø—É—Å–∫ PostgreSQL
        if command -v systemctl &> /dev/null; then
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        sudo -u postgres createuser --interactive --pwprompt trading_bot 2>/dev/null || true
        sudo -u postgres createdb trading_bot 2>/dev/null || true
        
    elif [ "$OS" = "macos" ]; then
        if command -v brew &> /dev/null; then
            brew services start postgresql
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
            createdb trading_bot 2>/dev/null || true
        fi
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
setup_redis() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis..."
    
    if [ "$OS" = "linux" ]; then
        if command -v systemctl &> /dev/null; then
            sudo systemctl start redis-server
            sudo systemctl enable redis-server
        fi
    elif [ "$OS" = "macos" ]; then
        if command -v brew &> /dev/null; then
            brew services start redis
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if redis-cli ping &> /dev/null; then
        print_success "Redis –∑–∞–ø—É—â–µ–Ω"
    else
        print_warning "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_venv() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python..."
    
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    else
        print_info "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è
    source venv/bin/activate
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    pip install --upgrade pip setuptools wheel
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    source venv/bin/activate
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pip install -r requirements.txt
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    pip install -r requirements-dev.txt
    
    print_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example"
        else
            print_warning "–§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ .env –≤—Ä—É—á–Ω—É—é"
        fi
    else
        print_info "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p logs
    print_success "–ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    source venv/bin/activate
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if command -v psql &> /dev/null; then
        if psql -U trading_bot -d trading_bot -c "SELECT 1;" &> /dev/null; then
            print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ"
        else
            print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            return
        fi
    fi
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic
    if [ -f "alembic.ini" ]; then
        print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic..."
        alembic upgrade head || print_warning "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    fi
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —á–µ—Ä–µ–∑ SQL —Å–∫—Ä–∏–ø—Ç
    if [ -f "db/init.sql" ]; then
        print_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏..."
        psql -U trading_bot -d trading_bot -f db/init.sql || print_warning "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è Linux)
create_systemd_services() {
    if [ "$OS" = "linux" ] && command -v systemctl &> /dev/null; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤..."
        
        # –°–µ—Ä–≤–∏—Å –¥–ª—è FastAPI
        sudo tee /etc/systemd/system/solana-trading-bot.service > /dev/null <<EOF
[Unit]
Description=Solana DEX Trading Bot
After=network.target postgresql.service redis-server.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$(pwd)
Environment=PATH=$(pwd)/venv/bin
ExecStart=$(pwd)/venv/bin/python run.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

        # –°–µ—Ä–≤–∏—Å –¥–ª—è Celery worker
        sudo tee /etc/systemd/system/solana-trading-worker.service > /dev/null <<EOF
[Unit]
Description=Solana DEX Trading Bot Worker
After=network.target postgresql.service redis-server.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$(pwd)
Environment=PATH=$(pwd)/venv/bin
ExecStart=$(pwd)/venv/bin/python run_worker.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

        # –°–µ—Ä–≤–∏—Å –¥–ª—è Sniper Bot
        sudo tee /etc/systemd/system/solana-trading-sniper.service > /dev/null <<EOF
[Unit]
Description=Solana DEX Trading Bot Sniper
After=network.target postgresql.service redis-server.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$(pwd)
Environment=PATH=$(pwd)/venv/bin
ExecStart=$(pwd)/venv/bin/python run_sniper.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd
        sudo systemctl daemon-reload
        
        print_success "Systemd —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if [ "$OS" = "linux" ] && command -v systemctl &> /dev/null; then
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ systemd
        sudo systemctl start solana-trading-bot
        sudo systemctl start solana-trading-worker
        sudo systemctl start solana-trading-sniper
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        sudo systemctl enable solana-trading-bot
        sudo systemctl enable solana-trading-worker
        sudo systemctl enable solana-trading-sniper
        
        print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ systemd"
        
    else
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
        print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ..."
        
        source venv/bin/activate
        
        # –ó–∞–ø—É—Å–∫ FastAPI
        nohup python run.py > logs/app.log 2>&1 &
        echo $! > .pid_app
        
        # –ó–∞–ø—É—Å–∫ Celery worker
        nohup python run_worker.py > logs/worker.log 2>&1 &
        echo $! > .pid_worker
        
        # –ó–∞–ø—É—Å–∫ Sniper Bot
        nohup python run_sniper.py > logs/sniper.log 2>&1 &
        echo $! > .pid_sniper
        
        print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
health_check() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FastAPI
    if curl -s http://localhost:8000/api/health > /dev/null; then
        print_success "FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
    if curl -s http://localhost:8000/api/metrics > /dev/null; then
        print_success "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        print_warning "Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ Makefile –∫–æ–º–∞–Ω–¥
create_makefile_commands() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ Makefile –∫–æ–º–∞–Ω–¥..."
    
    if [ -f "Makefile" ]; then
        print_success "Makefile —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_warning "Makefile –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é"
    fi
}

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
show_final_instructions() {
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! üéâ               ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    echo -e "${BLUE}üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:${NC}"
    echo "   ‚Ä¢ Web UI: http://localhost:8000"
    echo "   ‚Ä¢ API Docs: http://localhost:8000/docs"
    echo "   ‚Ä¢ Health Check: http://localhost:8000/api/health"
    
    echo -e "${BLUE}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}"
    echo "   ‚Ä¢ Prometheus: http://localhost:9090"
    echo "   ‚Ä¢ Grafana: http://localhost:3000 (admin/admin)"
    
    echo -e "${BLUE}üìÅ –õ–æ–≥–∏:${NC}"
    echo "   ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: logs/app.log"
    echo "   ‚Ä¢ Worker: logs/worker.log"
    echo "   ‚Ä¢ Sniper: logs/sniper.log"
    
    echo -e "${BLUE}üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
    if [ "$OS" = "linux" ] && command -v systemctl &> /dev/null; then
        echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: sudo systemctl status solana-trading-bot"
        echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: sudo systemctl stop solana-trading-bot"
        echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sudo systemctl restart solana-trading-bot"
    else
        echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: pkill -f 'python run.py'"
        echo "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: tail -f logs/*.log"
    fi
    
    echo -e "${BLUE}üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000"
    echo "   2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤—Ü–∞"
    echo "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ risk management"
    echo "   4. –î–æ–±–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Settings ‚Üí Alerts"
    
    echo -e "${BLUE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
    echo "   ‚Ä¢ README.md - –æ–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞"
    echo "   ‚Ä¢ INSTALL.md - –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥"
    echo "   ‚Ä¢ /docs - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    
    echo -e "${YELLOW}‚ö†Ô∏è  –í–∞–∂–Ω–æ:${NC}"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"
    echo "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ENABLE_REAL_TRADES=false –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Solana RPC URL –¥–ª—è –≤–∞—à–µ–π —Å–µ—Ç–∏"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_info "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Solana DEX Trading Bot..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    check_system
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_system_deps
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
    setup_postgresql
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
    setup_redis
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    create_venv
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_python_deps
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    setup_config
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database
    
    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
    create_systemd_services
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    health_check
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Makefile –∫–æ–º–∞–Ω–¥
    create_makefile_commands
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_final_instructions
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --check-only   –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
        echo "  --no-services  –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        exit 0
        ;;
    --check-only)
        print_header
        check_system
        print_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        exit 0
        ;;
    --no-services)
        print_header
        check_system
        install_system_deps
        setup_postgresql
        setup_redis
        create_venv
        install_python_deps
        setup_config
        init_database
        create_systemd_services
        print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 0
        ;;
    "")
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        main
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac