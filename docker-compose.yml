version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading_bot_postgres
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_bot
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading_bot_network
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_bot_network
    restart: unless-stopped

  # FastAPI Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_web
    environment:
      - DATABASE_URL=postgresql://trading_bot:password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - SOLANA_NETWORK=devnet
      - ENABLE_REAL_TRADES=false
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trading_bot_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading_bot_worker
    environment:
      - DATABASE_URL=postgresql://trading_bot:password@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
      - SOLANA_NETWORK=devnet
      - ENABLE_REAL_TRADES=false
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trading_bot_network
    restart: unless-stopped
    command: celery -A worker.celery_app worker --loglevel=info

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_bot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading_bot_network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: trading_bot_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - trading_bot_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - trading_bot_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading_bot_network:
    driver: bridge