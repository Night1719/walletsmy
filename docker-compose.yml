version: '3.8'

services:
  # Основное приложение
  bg-survey-platform:
    build: .
    container_name: bg-survey-platform
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_CONFIG=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///surveys.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./static:/app/static
    networks:
      - bg-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кеширования и сессий
  redis:
    image: redis:7-alpine
    container_name: bg-survey-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bg-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx для проксирования и SSL
  nginx:
    image: nginx:alpine
    container_name: bg-survey-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    networks:
      - bg-network
    depends_on:
      - bg-survey-platform
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (опционально, для продакшена)
  postgres:
    image: postgres:15-alpine
    container_name: bg-survey-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bg_survey}
      - POSTGRES_USER=${POSTGRES_USER:-bg_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bg_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bg_user} -d ${POSTGRES_DB:-bg_survey}"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # pgAdmin для управления PostgreSQL (опционально)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bg-survey-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@buntergroup.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - bg-network
    depends_on:
      - postgres
    profiles:
      - production

  # Backup сервис (опционально)
  backup:
    image: alpine:latest
    container_name: bg-survey-backup
    restart: "no"
    volumes:
      - ./backup:/backup
      - postgres_data:/var/lib/postgresql/data:ro
      - ./data:/app/data:ro
    networks:
      - bg-network
    command: |
      sh -c '
        echo "Создание резервной копии..."
        timestamp=$$(date +%Y%m%d_%H%M%S)
        
        # Резервная копия PostgreSQL
        if [ -d "/var/lib/postgresql/data" ]; then
          pg_dump -h postgres -U $${POSTGRES_USER:-bg_user} $${POSTGRES_DB:-bg_survey} > /backup/db_backup_$${timestamp}.sql
        fi
        
        # Резервная копия данных приложения
        tar -czf /backup/app_backup_$${timestamp}.tar.gz -C /app/data .
        
        echo "Резервная копия создана: backup_$${timestamp}"
      '
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bg_survey}
      - POSTGRES_USER=${POSTGRES_USER:-bg_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bg_password}
    depends_on:
      - postgres
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  bg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16